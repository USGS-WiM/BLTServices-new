//------------------------------------------------------------------------------
//----- Application Method Handler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2013 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles Site resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//              https://github.com/openrasta/openrasta/wiki/Handlers
//
//     

#region Comments
// 07.22.13 - TR - Renamed from ModifiersHandler to ApplicationMethodHandler
// 05.14.13 - JKN - Created
#endregion

using BLTServices.Authentication;

using OpenRasta.Web;
using OpenRasta.Security;

using System;
using System.Data;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects;
using System.Collections.Generic;
using System.Collections;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Runtime.InteropServices;


namespace BLTServices.Handlers
{
    public class ApplicationMethodHandler: HandlerBase
    {

        #region Properties
        public override string entityName
        {
            get { return "APPLICATION_METHOD"; }
        }
        #endregion
        #region Routed Methods
        #region GetMethods
        //---------------------Returns List of objects---------------------
        // returns all APPLICATION_METHOD
        [WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<APPLICATION_METHOD> anApplicationMethod;
            try
            {
                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        anApplicationMethod = GetEntities<APPLICATION_METHOD>(aBLTE).ToList();
                    }//end using
                }//end using
                activateLinks<APPLICATION_METHOD>(anApplicationMethod);

                return new OperationResult.OK { ResponseResource = anApplicationMethod };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }
        }//end HttpMethod.GET

        // returns all active APPLICATION_METHOD
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(string date)
        {
            List<APPLICATION_METHOD> anApplicationMethodList = null;
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now; 

                //set the date to current date if request is not authorized
                if (DateTime.Compare(thisDate.Value, DateTime.Now) < 0 && !CanManage()) thisDate = DateTime.Now;
               
                using (BLTRDSEntities aBLTE = GetRDS())
                {
                    anApplicationMethodList = GetActive(GetEntities<APPLICATION_METHOD>(aBLTE), thisDate.Value).ToList();
                }//end using

                activateLinks<APPLICATION_METHOD>(anApplicationMethodList);

                return new OperationResult.OK { ResponseResource = anApplicationMethodList };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }

        }//end HttpMethod.GET

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 applicationMethodID, [Optional] string date)
        {
            try
            {
                List<APPLICATION_METHOD> applicationMethodList;
                DateTime? thisDate = ValidDate(date);

                if (applicationMethodID < 0)
                { return new OperationResult.BadRequest(); }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        IQueryable<APPLICATION_METHOD> query;
                        query = GetEntities<APPLICATION_METHOD>(aBLTE).Where(am => am.APPLICATION_METHOD_ID == applicationMethodID);

                        if (thisDate.HasValue)
                            query = GetActive(query, thisDate.Value);

                        //process
                        applicationMethodList = query.ToList();
                    }//end using
                }//end using

                activateLinks<APPLICATION_METHOD>(applicationMethodList);

                return new OperationResult.OK { ResponseResource = applicationMethodList };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }
        }//end HttpMethod.GET

        //[WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        //[HttpOperation(HttpMethod.GET)]
        //public OperationResult Get(Int32 modifierID, [Optional] string date)
        //{
        //    try
        //    {
        //        List<MODIFIER> ModifierList;
        //        DateTime? thisDate = ValidDate(date);

        //        if (modifierID < 0)
        //        { return new OperationResult.BadRequest(); }

        //        using (EasySecureString securedPassword = GetSecuredPassword())
        //        {
        //            using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
        //            {
        //                IQueryable<MODIFIER> query;
        //                query = GetEntities<MODIFIER>(aBLTE).Where(m => m.MODIFIER_ID == modifierID);

        //                if (thisDate.HasValue)
        //                    query = GetActive(query, thisDate.Value);

        //                //process
        //                ModifierList = query.ToList();
        //            }//end using
        //        }//end using

        //        activateLinks<MODIFIER>(ModifierList);

        //        return new OperationResult.OK { ResponseResource = ModifierList };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
        //    }
        //}//end HttpMethod.GET

        // returns active Active Ingredients for the given pulaID
        [HttpOperation(HttpMethod.GET, ForUriName = "GetAILimitationsApplicationMethod")]
        public OperationResult GetAILimitationsApplicationMethod(Int32 aiLimitatationsID, [Optional]string date)
        {
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                //set the date to current date if request is not authorized
                if (DateTime.Compare(thisDate.Value, DateTime.Now) < 0 && !CanManage()) thisDate = DateTime.Now;

                List<APPLICATION_METHOD> applicationMethodList;
                using (BLTRDSEntities aBLTE = GetRDS())
                {

                    IQueryable<APPLICATION_METHOD> query1 =
                            (from AILimit in GetActive(aBLTE.AI_LIMITATIONS.Where(p => p.AI_LIMITATION_ID == aiLimitatationsID), thisDate.Value)
                             join am in aBLTE.APPLICATION_METHOD
                             on AILimit.APPLICATION_METHOD_ID equals am.APPLICATION_METHOD_ID
                             select am).Distinct();

                    applicationMethodList = GetActive(query1, thisDate.Value).ToList();

                    activateLinks<APPLICATION_METHOD>(applicationMethodList);

                }//end using

                return new OperationResult.OK { ResponseResource = applicationMethodList };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }
        }//end HttpMethod.GET
       
        //---------------------Returns individual objects---------------------
        [WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.GET, ForUriName = "GetEntity")]
        public OperationResult GetEntity(Int32 entityID)
        {
            APPLICATION_METHOD anApplicationMethod;
            try
            {
                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        anApplicationMethod = GetEntities<APPLICATION_METHOD>(aBLTE).SingleOrDefault(c => c.ID == entityID);

                    }//end using
                }//end using

                activateLinks<APPLICATION_METHOD>(anApplicationMethod);

                return new OperationResult.OK { ResponseResource = anApplicationMethod };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }
        }//end HttpMethod.GET

        #endregion
        #region POST Methods

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult POST(APPLICATION_METHOD anEntity)
        {
            try
            {
                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        if (!Exists(aBLTE, ref anEntity))
                        {
                            //create version
                            anEntity.VERSION_ID = SetVersion(aBLTE, anEntity.VERSION_ID, LoggedInUser(aBLTE).USER_ID, StatusType.Created, DateTime.Now).VERSION_ID;

                            anEntity.APPLICATION_METHOD_ID = GetNextID(aBLTE);

                            aBLTE.APPLICATION_METHOD.AddObject(anEntity);

                            aBLTE.SaveChanges();
                        }//end if

                        activateLinks<APPLICATION_METHOD>(anEntity);
                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = anEntity };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        #endregion
        #region Activate Methods

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.GET, ForUriName = "Activate")]
        public OperationResult Activate(Int32 entityID, [Optional] string date)
        {
            //No editing of tables are allowed. An edit call will create and activate a new entity, and expire the old one
            USER_ loggedInUser;
            APPLICATION_METHOD anApplicationMethod;
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                if (entityID <= 0)
                { return new OperationResult.BadRequest(); }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        //version user
                        loggedInUser = LoggedInUser(aBLTE);

                        anApplicationMethod = aBLTE.APPLICATION_METHOD.FirstOrDefault(c => c.ID == entityID);

                        if (anApplicationMethod == null)
                        { return new OperationResult.BadRequest(); }

                        //assign version
                        anApplicationMethod.VERSION_ID = SetVersion(aBLTE, anApplicationMethod.VERSION_ID, loggedInUser.USER_ID, StatusType.Activated, thisDate.Value).VERSION_ID;

                        ExpireOtherEntities(aBLTE, loggedInUser.USER_ID, anApplicationMethod, thisDate.Value);

                        aBLTE.SaveChanges();

                        activateLinks<APPLICATION_METHOD>(anApplicationMethod);
                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = anApplicationMethod };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        #endregion
        #region EDIT Methods

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.POST, ForUriName = "Edit")]
        public OperationResult Edit(Int32 entityID, APPLICATION_METHOD anEntity, [Optional] string date)
        {
            //No editing of tables are allowed. An edit call will create and activate a new entity, and expire the old one
            USER_ loggedInUser;
            APPLICATION_METHOD anApplicationMethod;
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                if (entityID <= 0)
                { return new OperationResult.BadRequest(); }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        //version user
                        loggedInUser = LoggedInUser(aBLTE);

                        anApplicationMethod = aBLTE.APPLICATION_METHOD.FirstOrDefault(c => c.ID == entityID);

                        if (anApplicationMethod == null)
                        { return new OperationResult.BadRequest(); }

                        //assign version
                        anEntity.VERSION_ID = SetVersion(aBLTE, anEntity.VERSION_ID, loggedInUser.USER_ID, StatusType.Created, DateTime.Now).VERSION_ID;
                        anEntity.VERSION_ID = SetVersion(aBLTE, anEntity.VERSION_ID, loggedInUser.USER_ID, StatusType.Activated, thisDate.Value).VERSION_ID;
                        ExpireEntities(aBLTE, loggedInUser.USER_ID, anEntity.APPLICATION_METHOD_ID, thisDate.Value);

                        aBLTE.APPLICATION_METHOD.AddObject(anEntity);
                        aBLTE.SaveChanges();

                        activateLinks<APPLICATION_METHOD>(anEntity);
                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = anEntity };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        #endregion
        #region EXPIRE Methods
        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.GET, ForUriName = "Expire")]
        public OperationResult Expire(Int32 entityID, [Optional] string date)
        {
            //No deleting of tables are allowed. An delete call will expire the entity
            APPLICATION_METHOD anApplicationMethod;
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                if (entityID <= 0)
                { return new OperationResult.BadRequest { }; }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {

                        anApplicationMethod = aBLTE.APPLICATION_METHOD.FirstOrDefault(m => m.ID == entityID);
                        if (anApplicationMethod == null)
                        { return new OperationResult.BadRequest(); }

                        //expire current 
                        anApplicationMethod.VERSION_ID = SetVersion(aBLTE, anApplicationMethod.VERSION_ID, LoggedInUser(aBLTE).USER_ID, StatusType.Expired, thisDate.Value).VERSION_ID;

                        aBLTE.SaveChanges();

                        activateLinks<APPLICATION_METHOD>(anApplicationMethod);

                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = anApplicationMethod };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.GET, ForUriName = "ExpireApplicationMethod")]
        public OperationResult ExpireApplicationMethod(Int32 applicationMethodID, [Optional] string date)
        {
            //No deleting of tables are allowed. An delete call will expire the entity
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                if (applicationMethodID <= 0)
                { return new OperationResult.BadRequest { }; }


                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        ExpireEntities(aBLTE, LoggedInUser(aBLTE).USER_ID, applicationMethodID, thisDate.Value);

                        aBLTE.SaveChanges();

                    }//end using
                }//end using

                return new OperationResult.OK();
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        #endregion
        #endregion
        #region Helper Methods
        private bool Exists(BLTRDSEntities aBLTE, ref APPLICATION_METHOD anEntity)
        {
            APPLICATION_METHOD existingEntity;
            APPLICATION_METHOD thisEntity = anEntity;
            //check if it exists
            try
            {
                existingEntity = aBLTE.APPLICATION_METHOD.FirstOrDefault(mt => string.Equals(mt.METHOD.ToUpper(), thisEntity.METHOD.ToUpper()));
           

                if (existingEntity == null)
                    return false;

                //if exists then update ref contact
                anEntity = existingEntity;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }//end Exists
        private decimal GetNextID(BLTRDSEntities aBLTE)
        {
            //create pulaID
            Decimal nextID = 1;
            if (aBLTE.APPLICATION_METHOD.Count() > 0)
                nextID = aBLTE.APPLICATION_METHOD.OrderByDescending(p => p.APPLICATION_METHOD_ID).First().APPLICATION_METHOD_ID + 1;

            return nextID;
        }
        private void ExpireOtherEntities(BLTRDSEntities aBLTE, decimal userId, APPLICATION_METHOD applicationMethod, DateTime dt)
        {
            //get all published, should only be 1
            List<APPLICATION_METHOD> aiList = aBLTE.APPLICATION_METHOD.Where(p => p.APPLICATION_METHOD_ID == applicationMethod.APPLICATION_METHOD_ID &&
                                                                                p.VERSION.PUBLISHED_TIME_STAMP <= dt).ToList();
            if (aiList == null) return;

            foreach (var p in aiList)
            {
                if (!p.Equals(applicationMethod))
                p.VERSION = SetVersion(aBLTE, p.VERSION_ID, userId, StatusType.Expired, dt);
            }//next
        }//end ExpireOtherEntities
        protected override void ExpireEntities(BLTRDSEntities aBLTE, decimal userId, decimal Id, DateTime dt)
        {
            //get all published, should only be 1
            List<APPLICATION_METHOD> aiList = aBLTE.APPLICATION_METHOD.Where(p => p.APPLICATION_METHOD_ID == Id &&
                                                               p.VERSION.PUBLISHED_TIME_STAMP <= dt).ToList();
            if (aiList == null) return;

            foreach (var p in aiList)
            {
                p.VERSION = SetVersion(aBLTE, p.VERSION_ID, userId, StatusType.Expired, dt);
            }//next
        }
        #endregion


    }//end class ApplicationMethodHandler

}//end namespace