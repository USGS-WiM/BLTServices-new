//------------------------------------------------------------------------------
//----- UTF8XmlCodec -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jon Baier USGS Wisconsin Internet Mapping
//  
//   purpose:   Created to facilitate generic EntityObject handler. Handles 
//              de/serialization of all table classes generated by EF. 
//              *All table classes must be explicitly added here*
//
//discussion:   A Codec is an enCOder/DECoder for a resources in 
//              this case the resources are POCO classes derived from the EF. 
//              https://github.com/openrasta/openrasta/wiki/Codecs
//
//     

#region Comments
// 10.18.12 - JB - Removed Members for allowed generic "entities" lookup handler
// 10.17.12 - JB - Moved extraTypes to a single static array for greater access
// 06.28.12 - JKN - Implement attribute reference override
// 02.03.12 - JB - Created to facilitate generic handler
#endregion
using System.IO;
using System.Text;
using System.Xml;
using BLTServices.Resources;

using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Data.Objects.DataClasses;
using System.Xml.Serialization;
using System;
using OpenRasta.Codecs;
using OpenRasta.TypeSystem;
using OpenRasta.Web;

namespace BLTServices.Codecs
{
    [MediaType("application/xml;q=0.4", ".xml")]
    public class BLTXmlSerializerCodec : SimpleUTF8XmlSerializerCodec 
    {
        //TODO: look into finding the types dynamically and generating this array on the fly.
        public static Type[] extraTypes = new Type[8] {    typeof(HypermediaEntity), 
                                                    typeof(EntityObject), 
                                                    typeof(AI_CLASS), 
                                                    typeof(CROP_USE), 
                                                    typeof(DIVISION), 
                                                    typeof(LIMITATION), 
                                                    typeof(APPLICATION_METHOD),
                                                    typeof(FORMULATION)
                                                };


        public override object ReadFrom(IHttpEntity request, IType destinationType, string parameterName)
        {
            if (destinationType.StaticType == null)
                throw new InvalidOperationException();

            if (destinationType.StaticType == typeof(EntityObject))
            {
                //Determine correct deserialization type
                //TODO: look into finding the types dynamically and generating this array on the fly.
                return new XmlSerializer(destinationType.StaticType,
                                         extraTypes)
                                         .Deserialize(request.Stream);
            }
            else
            {
                return new XmlSerializer(destinationType.StaticType).Deserialize(request.Stream);
            }
        }

        public override void WriteToCore(object obj, IHttpEntity response)
        {
           
           // create the overrider serialzier    
           XmlSerializer serializer = new XmlSerializer(obj.GetType(), 
                                                        this.OverrideReferenceAttributes( obj.GetType()), 
                                                        extraTypes, null, "");

           //serialize
           serializer.Serialize(Writer, obj);
            
            
        }
    }
}
