//------------------------------------------------------------------------------
//----- Configuration -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jonathan Baier
//              Jeremy Newson          
//  
//   purpose:   Configuration implements the IConfiurationSource interface. OpenRasta
//              will call the Configure method and use it to configure the application 
//              through a fluent interface using the Resource space as root objects. 
//
//discussion:   The ResourceSpace is where you can define the resources in the application and what
//              handles them and how thy are represented. 
//              https://github.com/openrasta/openrasta/wiki/Configuration
//
//     
#region Comments
// 05.15.13 - JKN- Implement remaining resources
// 11.09.12 - TR - Added PULA and PULALimitations Resources
// 10.10.12 - JB - Created
#endregion                          
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.Objects.DataClasses;
using System.ServiceModel.Syndication;

using OpenRasta.Authentication;
using OpenRasta.Authentication.Basic;
using OpenRasta.Codecs;
using OpenRasta.Codecs.WebForms;
using OpenRasta.Configuration;
using OpenRasta.DI;
using OpenRasta.IO;
using OpenRasta.Pipeline.Contributors;
using OpenRasta.Web.UriDecorators;

using BLTServices.Authentication;
using BLTServices.Resources;
using BLTServices.Handlers;
using BLTServices.Codecs;


namespace BLTServices
{
    public class Configuration:IConfigurationSource
    {
        public void Configure()
        {
            using (OpenRastaConfiguration.Manual)
            {

                // specify the authentication scheme you want to use, you can register multiple ones
                ResourceSpace.Uses.CustomDependency<IAuthenticationScheme, BasicAuthenticationScheme>(DependencyLifetime.Singleton);

                // register your basic authenticator in the DI resolver
                ResourceSpace.Uses.CustomDependency<IBasicAuthenticator, BLTBasicAuthentication>(DependencyLifetime.Transient);
                
                AddACTIVE_INGREDIENT_Resources();
                AddACTIVE_INGREDIENT_PULA_Resources();
                AddAI_CLASS_Resources();
                AddPULA_LIMITATIONS_Resources();
                AddCROP_USE_Resources();
                AddPRODUCT_Resources();
                AddDIVISION_Resources();
                AddSPECIES_Resources();
                AddSPECIES_FAMILY_Resources();
                AddSPECIES_GROUP_Resources();
                AddSPECIES_TAXA_Resources();
                AddLIMITATION_Resources();
                AddAPPLICATION_METHOD_Resources();
                AddFORMULATION_Resources();
                AddORGANIZATION_Resources();
                AddROLE_Resources();
                AddUSER_Resources();
                AddVERSION_Resources();
                AddAUTHENTICATION_Resources();

            }//End using OpenRastaConfiguration.Manual

        }//End Configure()

        #region Helper methods

        private void AddAUTHENTICATION_Resources()
        {
            //Authentication
            ResourceSpace.Has.ResourcesOfType<Boolean>()
            .AtUri("/login")
            .HandledBy<LoginHandler>()
            .TranscodedBy<WiMXmlSerializerCodec>();

        }//end AddAUTHENTICATION_Resources

        private void AddACTIVE_INGREDIENT_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<ACTIVE_INGREDIENT>>()
                .AtUri("/ActiveIngredients")
                .And.AtUri("/ActiveIngredients?ActiveDate={date}")
                
                .And.AtUri("/ActiveIngredients?aiID={activeIngredientID}&ActiveDate={date}").Named("GetAI")
                .And.AtUri("/PULAS/{pulaID}/ActiveIngredients?ActiveDate={date}").Named("GetPULAactiveIngredients")
                .And.AtUri("/Products/{productId}?ActiveDate={date}").Named("GetProductActiveIngredients")
                .HandledBy<ActiveIngredientHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<ACTIVE_INGREDIENT>()
                .AtUri("/ActiveIngredients/{entityID}").Named("GetEntity")
                .And.AtUri("/ActiveIngredients/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/ActiveIngredients/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/ActiveIngredients/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/ActiveIngredients/Expire?aiID={activeIngredientID}&ExpireDate={date}").Named("ExpireActiveIngredient")
                .HandledBy<ActiveIngredientHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddACTIVE_INGREDIENT_Resources

        private void AddACTIVE_INGREDIENT_PULA_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<ACTIVE_INGREDIENT_PULA>>()
                .AtUri("/PULAs").Named("GetAll")                
                .And.AtUri("/PULAs?ActiveDate={date}")                
                .And.AtUri("/PULAs?pulaId={pulaId}&ActiveDate={date}").Named("GetAIPULAS")
                .HandledBy<ActiveIngredientPULAHander>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<ACTIVE_INGREDIENT_PULA>()
                .AtUri("/PULAs/{entityID}").Named("GetEntity")
                .And.AtUri("/PULA?shapeId={shapeId}").Named("GetshapeIDPULA")
                .And.AtUri("/PULAs/{entityID}/Publish").Named("PublishAIPULA")
                .And.AtUri("/PULAs/POI/{shapeId}?ActiveDate={date}").Named("GetShapePULAS")
                .And.AtUri("/PULAs/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/PULAs/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/PULAs/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/PULAs/Expire?pulaID={pulaID}&ExpireDate={date}").Named("ExpirePULA")
                .HandledBy<ActiveIngredientPULAHander>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<PULAList>()
               .AtUri("PULAs/simplePULAs?ActiveDate={date}").Named("GetSimplePULAS")
               .HandledBy<ActiveIngredientPULAHander>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        } //end AddACTIVE_INGREDIENT_PULA_Resources
       
        private void AddAI_CLASS_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<AI_CLASS>>()
                .AtUri("/AIClasses")
                .And.AtUri("/AIClasses?ActiveDate={date}")
                .And.AtUri("/AIClasses?aiClassID={aiClassID}&ActiveDate={date}")
                .And.AtUri("/ActiveIngredients/{activeIngredientID}/AIClass?ActiveDate={date}").Named("GetActiveIngredientClasses")
                .HandledBy<AIClassHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<AI_CLASS>()
                .AtUri("/AIClasses/{entityID}").Named("GetEntity")
                .And.AtUri("/AIClasses/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/AIClasses/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/AIClasses/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/AIClasses/Expire?aiClassID={aiClassID}&ExpireDate={date}").Named("ExpireActiveIngredient")
                .And.AtUri("/ActiveIngredients/{entityID}/AIClass").Named("GetActiveIngredientsClass")
                .HandledBy<AIClassHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddAI_CLASS_Resources

        private void AddPULA_LIMITATIONS_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<PULA_LIMITATIONS>>()
                .AtUri("/PULALimitations")
                .And.AtUri("/PULALimitations?ActiveDate={date}")
                .And.AtUri("/PULALimitations?pulaLimitationsID={aiClassID}&ActiveDate={date}")
                .And.AtUri("/PULAs/{pulaID}/PULALimitations?ActiveDate={date}").Named("GetPULALimitations")
                .And.AtUri("/PULAs/{pulaID}/SavedPULALimitations").Named("GetSavedPULALimitations")
                .HandledBy<PULALimitationsHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<PULA_LIMITATIONS>()
                .AtUri("/PULALimitation/{entityID}").Named("GetEntity")
                .And.AtUri("/PULALimitations/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/PULALimitations/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/PULALimitations/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/PULALimitations/Expire?pulaID={pulaID}&ExpireDate={date}").Named("ExpirePULALimitations")
                .HandledBy<PULALimitationsHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddPULA_LIMITATIONS_Resources

        private void AddCROP_USE_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<CROP_USE>>()
                .AtUri("/CropUses")
                .And.AtUri("/CropUses?ActiveDate={date}")
                .And.AtUri("/CropUses?CropUseID={cropUseID}&ActiveDate={date}")
                .And.AtUri("/PULALimitations/{pulaLimitationsID}/CropUse?ActiveDate={date}").Named("GetPULALimitationsCropUse")
                .HandledBy<CropUseHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<CROP_USE>()
                .AtUri("/CropUses/{entityID}").Named("GetEntity")
                .And.AtUri("/CropUses/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/CropUses/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/CropUses/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/CropUses/Expire?CropUseID={cropUseID}&ExpireDate={date}").Named("ExpireCropUse")
                .HandledBy<CropUseHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
                        
        }//end AddCROP_USE_Resources

        private void AddPRODUCT_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<PRODUCT>>()
                .AtUri("/Products")
                .And.AtUri("/Products?ActiveDate={date}")
                .And.AtUri("/Products?ProductID={productID}&ActiveDate={date}")
                .And.AtUri("/ActiveIngredients/{activeIngredientID}/Product?ActiveDate={date}").Named("GetAIProduct")
                .HandledBy<ProductHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<PRODUCT>()
                .AtUri("/Products/{entityID}").Named("GetEntity")
                .And.AtUri("/Products/{productID}/addProductToAI?ActiveDate={date}").Named("AddProductToAI")
                .And.AtUri("/Products/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/Products/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/Products/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/Products/Expire?ProductID={productID}&ExpireDate={date}").Named("ExpireProduct")
                .HandledBy<ProductHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddPRODUCT_Resources

        private void AddDIVISION_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<DIVISION>>()
                .AtUri("/Divisions")
                .HandledBy<DivisionHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<DIVISION>()
                .AtUri("/Divisions/{divisionID}")
                .HandledBy<DivisionHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
                        
        }//end AddDIVISION_Resources

        private void AddSPECIES_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<SPECIES>>()
                .AtUri("/Species")
                .And.AtUri("/ActiveIngredientPULA/{activeIngredientPULAID}/Species").Named("GetPULASpecies")
                .HandledBy<SpeciesHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<SPECIES>()
                .AtUri("/Species/{speciesID}")
                .HandledBy<SpeciesHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<SpeciesList>()
                .AtUri("/PULAs/{entityID}/AddSpeciesToPULA?ActiveDate={date}").Named("AddSpeciesToPULA")
                .And.AtUri("/PULAs/{entityID}/RemoveSpeciesFromPULA?ActiveDate={date}").Named("RemoveSpeciesFromPULA")
                .And.AtUri("/SimpleSpecies").Named("GetSpeciesList")
                .HandledBy<SpeciesHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddSPECIES_Resources

        private void AddSPECIES_GROUP_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<SPECIES_GROUP>>()
                .AtUri("/SpeciesGroups")
                .HandledBy<SpeciesGroupHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<SPECIES_GROUP>()
                .AtUri("/SpeciesGroups/{speciesGroupID}")
                .HandledBy<SpeciesGroupHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddSPECIES_GROUP_Resources
        
        private void AddSPECIES_FAMILY_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<SPECIES_FAMILY>>()
                .AtUri("/SpeciesFamilies")
                .HandledBy<SpeciesFamilyHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<SPECIES_FAMILY>()
                .AtUri("/SpeciesFamilies/{speciesFamilyID}")
                .HandledBy<SpeciesFamilyHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddSPECIES_FAMILY_Resources

        private void AddSPECIES_TAXA_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<SPECIES_TAXA>>()
                .AtUri("/SpeciesTaxas")
                .HandledBy<SpeciesTaxaHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<SPECIES_TAXA>()
                .AtUri("/SpeciesTaxas/{speciesTaxaID}")
                .HandledBy<SpeciesTaxaHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddSPECIES_TAXA_Resources

        private void AddLIMITATION_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<LIMITATION>>()
                .AtUri("/Limitations")
                .And.AtUri("/Limitations?ActiveDate={date}")
                .And.AtUri("/Limitations?LimitationID={limitationID}&ActiveDate={date}")
                .And.AtUri("/PULALimitations/{pulaLimitationsID}/Limitation?ActiveDate={date}").Named("GetPULALimitationsLimitation")
                .HandledBy<LimitationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<LIMITATION>()
                .AtUri("/Limitations/{entityID}").Named("GetEntity")
                 .And.AtUri("/Limitations/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/Limitations/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/Limitations/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/Limitations/Expire?LimitationID={limitationID}&ExpireDate={date}").Named("ExpireLimitation")
                .HandledBy<LimitationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddLIMITATION_Resources

        private void AddAPPLICATION_METHOD_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<APPLICATION_METHOD>>()
                .AtUri("/ApplicationMethods")
                .And.AtUri("/ApplicationMethods?ActiveDate={date}")
                .And.AtUri("/ApplicationMethods?ApplicationMethodID={applicationMethodID}&ActiveDate={date}")
                .And.AtUri("/PULALimitations/{pulaLimitationsID}/ApplicationMethod?ActiveDate={date}").Named("GetPULALimitationsApplicationMethod")
                .HandledBy<ApplicationMethodHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<APPLICATION_METHOD>()
                .AtUri("/ApplicationMethods/{entityID}").Named("GetEntity")
                .And.AtUri("/ApplicationMethods/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/ApplicationMethods/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/ApplicationMethods/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/ApplicationMethods/Expire?ApplicationMethodID={ApplicationMethodID}&ExpireDate={date}").Named("ExpireApplicationMethod")
                .HandledBy<ApplicationMethodHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
                        
        }//end AddAPPLICATION_METHOD_Resources

        private void AddFORMULATION_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<FORMULATION>>()
                .AtUri("/Formulations")
                .And.AtUri("/Formulations?ActiveDate={date}")
                .And.AtUri("/Formulations?FormulationID={formulationID}&ActiveDate={date}")
                .And.AtUri("/PULALimitations/{pulaLimitationsID}/Formulation?ActiveDate={date}").Named("GetPULALimitationsFormulation")
                .HandledBy<FormulationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<FORMULATION>()
                .AtUri("/Formulations/{entityID}").Named("GetEntity")
                .And.AtUri("/Formulations/{entityID}/Activate?ActiveDate={date}").Named("Activate")
                .And.AtUri("/Formulations/{entityID}/Edit?ActiveDate={date}").Named("Edit")
                .And.AtUri("/Formulations/{entityID}/Expire?ExpireDate={date}").Named("Expire")
                .And.AtUri("/Formulations/Expire?FormulationID={FormulationID}&ExpireDate={date}").Named("ExpireFormulation")
                .HandledBy<FormulationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddFORMULATION_Resources

        private void AddORGANIZATION_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<ORGANIZATION>>()
                .AtUri("/Organizations")
                .HandledBy<OrganizationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<ORGANIZATION>()
                .AtUri("/Organizations/{organizationID}")
                .HandledBy<OrganizationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddORGANIZATION_Resources

        private void AddROLE_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<ROLE>>()
                .AtUri("/Roles")
                .HandledBy<RoleHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<ROLE>()
                .AtUri("/Roles/{roleID}")
                .HandledBy<RoleHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddROLE_Resources

        private void AddUSER_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<USER_>>()
                .AtUri("/Users")
                .And.AtUri("Versions/{versionID}/Users").Named("GetVersionUsers")
                .HandledBy<UserHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<USER_>()
                .AtUri("/Users/{userID}")
                .And.AtUri("Users?username={userName}").Named("GetUserByUserName")
                .And.AtUri("/Users?username={userName}&old={oldPassword}&new={newPassword}").Named("ChangeUserPassword")
                .HandledBy<UserHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddUSER_Resources

        private void AddVERSION_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<Version>>()
               .AtUri("/Versions")
               .And.AtUri("/Versions?ActiveDate={date}")
               .HandledBy<VersionHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>(); 
            
            ResourceSpace.Has.ResourcesOfType<VERSION>()
                .AtUri("/Versions/{PULALimitID}")
                .And.AtUri("/Version/{entityID}").Named("GetVersion")
                .And.AtUri("/ActiveIngredients/{entityID}/Version").Named("GetActiveIngredientVersion")
                .HandledBy<VersionHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }
        #endregion

    }//End class Configuration
}//End namespace