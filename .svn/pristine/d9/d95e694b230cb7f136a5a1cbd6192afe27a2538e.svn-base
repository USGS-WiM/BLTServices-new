//------------------------------------------------------------------------------
//----- PartsController.cs-----------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Tonia Roddick USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Display a master PULA page and link to individual parts pages (all in popup)
//
//discussion:   
//
//     

#region Comments
// 05.03.13 - TR - Created

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Objects.DataClasses;
using System.Text;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Xml;
using System.Text.RegularExpressions;

using RestSharp;
using BLTServices;
using BLTServices.Authentication;
using BLTServices.Resources;
using BLTWeb.Utilities;
using BLTWeb.Models;
using BLTWeb.Helpers;

namespace BLTWeb.Controllers
{
    [RequireSSL]
    [Authorize]
    public class PULAController : Controller
    { 
        //pula was clicked in map
        public ActionResult PULA_Click(int shapeId, DateTime? date, string ingredient, string product)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();

            //what do they want to see? 
            //1: Create an empty PULA (shapeID doesn't exist yet in db)
            //2: Publish a saved PULA or make changes to created pula (shapeId exists, but not published)
            //3: Look at details of a published PULA

            request.Resource = "/PULA?shapeId={shapeId}";
            request.RootElement = "ACTIVE_INGREDIENT_PULA";
            request.AddParameter("shapeId", shapeId, ParameterType.UrlSegment);
            ACTIVE_INGREDIENT_PULA thisPULA = serviceCaller.Execute<ACTIVE_INGREDIENT_PULA>(request);
            
            //get most recent version and if exists,
                // check if Published, 
                    // true = Details
                // else go to PULA_Publish
            // else go to PULA_Create
            if (thisPULA != null) //shapeID exists
            {
                if (thisPULA.IS_PUBLISHED == 0) //false
                {
                     //pula has not been published, but does exist , send to PULA_Publish
                        return RedirectToAction("PULA_Publish", new { shapeId = shapeId, date = date });
                }
                else
                {
                    //pula has been published, send to details
                    return RedirectToAction("PULA_Details", new { shapeId = shapeId, date = date });
                }                             
            }
            else
            {
                //pula hasn't been created yet, send to PULA_Create
                return RedirectToAction("PULA_Create", new { shapeId = shapeId});
            }
        }
         
        //pula was clicked in mapper, show info in popup
        // GET: /PULA_Details/11
        public PartialViewResult PULA_Details(int shapeId, DateTime date)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();

            //get the ACTIVE_INGREDIENT_PULA
            request.Resource = "/PULA?shapeId={shapeId}";
            request.RootElement = "ACTIVE_INGREDIENT_PULA";
            request.AddParameter("shapeId", shapeId, ParameterType.UrlSegment);
            ACTIVE_INGREDIENT_PULA thisPULA = serviceCaller.Execute<ACTIVE_INGREDIENT_PULA>(request);
            
            //get the AI_LIMITATION
            request = new RestRequest();
            request.Resource = "PULAs/{pulaID}/AILimitations?ActiveDate={date}";
            request.RootElement = "ArrayOfAI_LIMITATIONS";
            request.AddParameter("pulaID", thisPULA.PULA_ID, ParameterType.UrlSegment);
            List<AI_LIMITATIONS> AILimitationList = serviceCaller.Execute<List<AI_LIMITATIONS>>(request);
            
            //get the version info
            request = new RestRequest();
            request.Resource = "/Version/{entityID}";
            request.RootElement = "VERSION";
            request.AddParameter("entityID", thisPULA.VERSION_ID, ParameterType.UrlSegment);
            VERSION thisVersion = serviceCaller.Execute<VERSION>(request);

            //to store each row in the table for display
            List<PublishedPULA> PubPulaLists = new List<PublishedPULA>();
            List<PRODUCT> AI_ProductList = new List<PRODUCT>();
            List<SPECIES_ACTIVE_INGREDIENT_PULA> AI_SppList = new List<SPECIES_ACTIVE_INGREDIENT_PULA>();

            //get all the parts
            //CROP_USE for each aiLimitation
            foreach (AI_LIMITATIONS ai in AILimitationList)
            {
                PublishedPULA thisPubPULA = new PublishedPULA();
                
                //get Active Ingredient
                request = new RestRequest();
                request.Resource = "/ActiveIngredients?aiID={activeIngredientID}&ActiveDate={date}";
                request.RootElement = "ArrayOfACTIVE_INGREDIENT";
                request.AddParameter("activeIngredientID", ai.ACTIVE_INGREDIENT_ID, ParameterType.UrlSegment);
                List<ACTIVE_INGREDIENT> aiList = serviceCaller.Execute<List<ACTIVE_INGREDIENT>>(request);
                //give me newest version
                ACTIVE_INGREDIENT thisAI = aiList.OrderByDescending(a => a.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.AI = thisAI.INGREDIENT_NAME;
                thisPubPULA.CAS = thisAI.CAS_NUMBER;

                //get ai class - if one
                if (thisAI.AI_CLASS_ID != null && thisAI.AI_CLASS_ID != 0)
                {
                    request = new RestRequest();
                    request.Resource = "/AIClasses?aiClassID={aiClassID}&ActiveDate={date}";
                    request.RootElement = "ArrayOfAI_CLASS";
                    request.AddParameter("aiClassID", thisAI.AI_CLASS_ID, ParameterType.UrlSegment);
                    List<AI_CLASS> aiclassList = serviceCaller.Execute<List<AI_CLASS>>(request);
                    //give me newest version
                    AI_CLASS thisAIclass = aiclassList.OrderByDescending(aicl => aicl.VERSION_ID).FirstOrDefault();
                    //store in model
                    thisPubPULA.AIClass = thisAIclass.AI_CLASS_NAME;
                }
                
                //get application Method
                request = new RestRequest();
                request.Resource = "/ApplicationMethods?ApplicationMethodID={applicationMethodID}&ActiveDate={date}";
                request.RootElement = "ArrayOfAPPLICATION_METHOD";
                request.AddParameter("applicationMethodID", ai.APPLICATION_METHOD_ID, ParameterType.UrlSegment);
                List<APPLICATION_METHOD> amList = serviceCaller.Execute<List<APPLICATION_METHOD>>(request);
                //give me the newest version
                APPLICATION_METHOD thisAppMethod = amList.OrderByDescending(m => m.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.AppMethod = thisAppMethod.METHOD;

                //get formulation
                request = new RestRequest();
                request.Resource = "/Formulations?FormulationsID={formulationsID}&ActiveDate={date}";
                request.RootElement = "ArrayOfFORMULATION";
                request.AddParameter("formulationsID", ai.FORMULATION_ID, ParameterType.UrlSegment);
                List<FORMULATION> formList = serviceCaller.Execute<List<FORMULATION>>(request);
                //give me the newest version
                FORMULATION thisFormulation = formList.OrderByDescending(m => m.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.Formulation = thisFormulation.FORM;

                //get crop use
                request = new RestRequest();
                request.Resource = "/CropUses?CropUseID={cropUseID}&ActiveDate={date}";
                request.RootElement = "ArrayOfCROP_USE";
                request.AddParameter("cropUseID", ai.CROP_USE_ID, ParameterType.UrlSegment);
                List<CROP_USE> cuList = serviceCaller.Execute<List<CROP_USE>>(request);
                //give me the newest version
                CROP_USE thisCropUse = cuList.OrderByDescending(cu => cu.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.CropUse = thisCropUse.USE;

                //get limitation code
                request = new RestRequest();
                request.Resource = "/Limitations?LimitationID={limitationID}&ActiveDate={date}";
                request.RootElement = "ArrayOfLIMITATION";
                request.AddParameter("limitationID", ai.LIMITATION_ID, ParameterType.UrlSegment);
                List<LIMITATION> lList = serviceCaller.Execute<List<LIMITATION>>(request);
                //give me the newest version
                LIMITATION thislimitation = lList.OrderByDescending(l => l.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.Code = thislimitation.CODE;

                PubPulaLists.Add(thisPubPULA);

                //get ProductAI
                //request = new RestRequest();
                //request.Resource = "/ActiveIngredients/{activeIngredientID}/Product?ActiveDate={date}";
                //request.RootElement = "ArrayOfPRODUCT";
                //request.AddParameter("activeIngredientID", ai.ACTIVE_INGREDIENT_ID, ParameterType.UrlSegment);
                //List<PRODUCT> theseAIProducts = serviceCaller.Execute<List<PRODUCT>>(request);
                //foreach (PRODUCT aiPr in theseAIProducts)
                //{
                //    AI_ProductList.Add(aiPr);
                //}

                //get SppAI

            }
            
            //
            //GENERAL TAB
            ViewData["Version"] = thisVersion;

            //get the creator and their org/div
            request = new RestRequest();
            request.Resource = "/Users/{userID}";
            request.RootElement = "ArrayOfUSER_";
            request.AddParameter("userID", thisVersion.CREATOR_ID, ParameterType.UrlSegment);
            List<USER_> creatList = serviceCaller.Execute<List<USER_>>(request);
            USER_ creator = creatList.FirstOrDefault();
            ViewData["creator"] = creator;

            if (creator != null)
            {
                if (creator.ORGANIZATION_ID != 0 && creator.ORGANIZATION_ID != null)
                {
                    request = new RestRequest();
                    request.Resource = "/Organizations/{organizationID}";
                    request.RootElement = "ORGANIZATION";
                    request.AddParameter("organizationID", creator.ORGANIZATION_ID, ParameterType.UrlSegment);
                    ViewData["creatorOrg"] = serviceCaller.Execute<ORGANIZATION>(request).NAME;
                }
                if (creator.DIVISION_ID != 0 && creator.DIVISION_ID != null)
                {
                    request = new RestRequest();
                    request.Resource = "/Divisions/{divisionID}";
                    request.RootElement = "DIVISION";
                    request.AddParameter("divisionID", creator.DIVISION_ID, ParameterType.UrlSegment);
                    ViewData["creatorDiv"] = serviceCaller.Execute<DIVISION>(request).DIVISION_NAME;
                }
            }
            //get the publisher and their org/div
            if (thisVersion.PUBLISHER_ID != null && thisVersion.PUBLISHER_ID != 0)
            {
                request = new RestRequest();
                request.Resource = "/Users/{userID}";
                request.RootElement = "ArrayOfUSER_";
                request.AddParameter("userID", thisVersion.PUBLISHER_ID, ParameterType.UrlSegment);
                List<USER_> pubList = serviceCaller.Execute<List<USER_>>(request);
                USER_ publisher = pubList.FirstOrDefault();
                ViewData["publisher"] = publisher;
            
                if (publisher.ORGANIZATION_ID != 0 && publisher.ORGANIZATION_ID != null)
                {
                    request = new RestRequest();
                    request.Resource = "/Organizations/{organizationID}";
                    request.RootElement = "ORGANIZATION";
                    request.AddParameter("organizationID", publisher.ORGANIZATION_ID, ParameterType.UrlSegment);
                    ViewData["publisherOrg"] = serviceCaller.Execute<ORGANIZATION>(request).NAME;
                }
                if (publisher.DIVISION_ID != 0 && publisher.DIVISION_ID != null)
                {
                    request = new RestRequest();
                    request.Resource = "/Divisions/{divisionID}";
                    request.RootElement = "DIVISION";
                    request.AddParameter("divisionID", publisher.DIVISION_ID, ParameterType.UrlSegment);
                    ViewData["publisherDiv"] = serviceCaller.Execute<DIVISION>(request).DIVISION_NAME;
                }
            }
            //AI TAB
            ViewData["AIPULA"] = thisPULA;
            ViewData["PulaModel"] = PubPulaLists;

            //SPECIES TAB
                //Species

            //PRODUCT TAB
            ViewData["AIProducts"] = AI_ProductList;

            //get months and years lists
            ViewBag.Months = GetMonthsList();
            ViewBag.Years = GetYearList();

            //get logged in User
            ViewData["loggedIn"] = GetLoggedInUser();

            return PartialView();
        }

        //expiration date was added
        public string AddExpiration(string month, string year, int versionId, int loggedInID)
        {
            //build the date
            string Month = month;
            string fullDate = Month + "/01/" + year;
            DateTime ExpireDate = Convert.ToDateTime(fullDate);

            //get the version
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "Version/{entityId}";
            request.RootElement = "VERSION";
            request.AddParameter("entityId", versionId, ParameterType.UrlSegment);
            VERSION thisVersion = serviceCaller.Execute<VERSION>(request);

            //update the fields
            thisVersion.EXPIRER_ID = loggedInID;
            thisVersion.EXPIRED_TIME_STAMP = ExpireDate;
            return ExpireDate.ToString();

            //PUT it back
            //request = new RestRequest(Method.POST);
            //request.Resource = "/Version/{entityID}";
            //request.RequestFormat = DataFormat.Xml;
            //request.AddParameter("entityId", thisVersion.VERSION_ID, ParameterType.UrlSegment);
            //request.AddHeader("X-HTTP-Method-Override", "PUT");
            //request.AddHeader("Content-Type", "application/xml");
            ////Use extended serializer
            //BLTWebSerializer serializer = new BLTWebSerializer();
            //request.AddParameter("application/xml", serializer.Serialize<VERSION>(thisVersion), ParameterType.RequestBody);
            //VERSION updatedVersion = serviceCaller.Execute<VERSION>(request);
            //if (updatedVersion.VERSION_ID != null && updatedVersion.VERSION_ID != 0)
            //{
            //    return true;
            //}
            //else
            //{
            //    return false;
            //}
        }

        //PULA was determined to be Created but not Published, sent here from PULA_Click
        // GET: /PULA_Details/11
        public PartialViewResult PULA_Publish(int shapeId, DateTime date)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();

            //get the ACTIVE_INGREDIENT_PULA
            request.Resource = "/PULA?shapeId={shapeId}";
            request.RootElement = "ACTIVE_INGREDIENT_PULA";
            request.AddParameter("shapeId", shapeId, ParameterType.UrlSegment);
            ACTIVE_INGREDIENT_PULA AIPULA = serviceCaller.Execute<ACTIVE_INGREDIENT_PULA>(request);
           
            //get the AI_LIMITATION (saved but not published)
            request = new RestRequest();
            request.Resource = "/PULAs/{pulaID}/SavedAILimitations";
            request.RootElement = "ArrayOfAI_LIMITATIONS";
            request.AddParameter("pulaID", AIPULA.PULA_ID, ParameterType.UrlSegment);
            List<AI_LIMITATIONS> AILimitationList = serviceCaller.Execute<List<AI_LIMITATIONS>>(request);

            //get the version info
            request = new RestRequest();
            request.Resource = "/Version/{entityID}";
            request.RootElement = "VERSION";
            request.AddParameter("entityID", AIPULA.VERSION_ID, ParameterType.UrlSegment);
            VERSION thisVersion = serviceCaller.Execute<VERSION>(request);

            //to store each row in the table for display
            List<PublishedPULA> PubPulaLists = new List<PublishedPULA>();
            List<PRODUCT> AI_ProductList = new List<PRODUCT>();
            List<SPECIES_ACTIVE_INGREDIENT_PULA> AI_SppList = new List<SPECIES_ACTIVE_INGREDIENT_PULA>();

            //get all the parts
            //CROP_USE for each aiLimitation
            foreach (AI_LIMITATIONS ai in AILimitationList)
            {
                PublishedPULA thisPubPULA = new PublishedPULA();

                //get Active Ingredient
                request = new RestRequest();
                request.Resource = "/ActiveIngredients?aiID={activeIngredientID}&ActiveDate={date}";
                request.RootElement = "ArrayOfACTIVE_INGREDIENT";
                request.AddParameter("activeIngredientID", ai.ACTIVE_INGREDIENT_ID, ParameterType.UrlSegment);
                List<ACTIVE_INGREDIENT> aiList = serviceCaller.Execute<List<ACTIVE_INGREDIENT>>(request);
                //give me newest version
                ACTIVE_INGREDIENT thisAI = aiList.OrderByDescending(a => a.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.AI = thisAI.INGREDIENT_NAME;
                thisPubPULA.CAS = thisAI.CAS_NUMBER;

                //get ai class
                //request = new RestRequest();
                //request.Resource = "/AIClasses?aiClassID={aiClassID}&ActiveDate={date}";
                //request.RootElement = "ArrayOfAI_CLASS";
                //request.AddParameter("aiClassID", thisAI.AI_CLASS_ID, ParameterType.UrlSegment);
                //List<AI_CLASS> aiclassList = serviceCaller.Execute<List<AI_CLASS>>(request);
                ////give me newest version
                //AI_CLASS thisAIclass = aiclassList.OrderByDescending(aicl => aicl.VERSION_ID).FirstOrDefault();
                ////store in model
                //thisPubPULA.AIClass = thisAIclass.AI_CLASS_NAME;

                //get application method
                request = new RestRequest();
                request.Resource = "/ApplicationMethods?ApplicationMethodID={applicationMethodID}&ActiveDate={date}";
                request.RootElement = "ArrayOfAPPLICATION_METHOD";
                request.AddParameter("applicationMethodID", ai.APPLICATION_METHOD_ID, ParameterType.UrlSegment);
                List<APPLICATION_METHOD> amList = serviceCaller.Execute<List<APPLICATION_METHOD>>(request);
                //give me the newest version
                APPLICATION_METHOD thisAppMethod = amList.OrderByDescending(m => m.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.AppMethod = thisAppMethod.METHOD;

                //get formulation
                request = new RestRequest();
                request.Resource = "/Formulations?FormulationsID={formulationsID}&ActiveDate={date}";
                request.RootElement = "ArrayOfAPPLICATION_METHOD";
                request.AddParameter("formulationsID", ai.FORMULATION_ID, ParameterType.UrlSegment);
                List<FORMULATION> formList = serviceCaller.Execute<List<FORMULATION>>(request);
                //give me the newest version
                FORMULATION thisFormulation = formList.OrderByDescending(m => m.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.Formulation = thisFormulation.FORM;

                //get crop use
                request = new RestRequest();
                request.Resource = "/CropUses?CropUseID={cropUseID}&ActiveDate={date}";
                request.RootElement = "ArrayOfCROP_USE";
                request.AddParameter("cropUseID", ai.CROP_USE_ID, ParameterType.UrlSegment);
                List<CROP_USE> cuList = serviceCaller.Execute<List<CROP_USE>>(request);
                //give me the newest version
                CROP_USE thisCropUse = cuList.OrderByDescending(cu => cu.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.CropUse = thisCropUse.USE;

                //get limitation code
                request = new RestRequest();
                request.Resource = "/Limitations?LimitationID={limitationID}&ActiveDate={date}";
                request.RootElement = "ArrayOfLIMITATION";
                request.AddParameter("limitationID", ai.LIMITATION_ID, ParameterType.UrlSegment);
                List<LIMITATION> lList = serviceCaller.Execute<List<LIMITATION>>(request);
                //give me the newest version
                LIMITATION thislimitation = lList.OrderByDescending(l => l.VERSION_ID).FirstOrDefault();
                //store in model
                thisPubPULA.Code = thislimitation.CODE;

                PubPulaLists.Add(thisPubPULA);
            }     
            
            //get SppAI
            request = new RestRequest();
            request.Resource = "/ActiveIngredientPULA/{activeIngredientPULAID}/Species";
            request.RootElement = "ArrayOfSPECIES";
            request.AddParameter("activeIngredientPULAID", AIPULA.PULA_ID, ParameterType.UrlSegment);
            List<SPECIES> sppPULAlist = serviceCaller.Execute<List<SPECIES>>(request);

            //get ProductAI
            //request = new RestRequest();
            //request.Resource = "/ActiveIngredients/{activeIngredientID}/Product?ActiveDate={date}";
            //request.RootElement = "ArrayOfPRODUCT";
            //request.AddParameter("activeIngredientID", ai.ACTIVE_INGREDIENT_ID, ParameterType.UrlSegment);
            //List<PRODUCT> theseAIProducts = serviceCaller.Execute<List<PRODUCT>>(request);
            //foreach (PRODUCT aiPr in theseAIProducts)
            //{
            //    AI_ProductList.Add(aiPr);
            //}

                

            

            //
            //GENERAL TAB
            ViewData["Version"] = thisVersion;

            //get the creator and their org/div
            request = new RestRequest();
            request.Resource = "/Users/{userID}";
            request.RootElement = "ArrayOfUSER_";
            request.AddParameter("userID", thisVersion.CREATOR_ID, ParameterType.UrlSegment);
            List<USER_> creatList = serviceCaller.Execute<List<USER_>>(request);
            USER_ creator = creatList.FirstOrDefault();
            ViewData["creator"] = creator;

            if (creator != null)
            {
                if (creator.ORGANIZATION_ID != 0 && creator.ORGANIZATION_ID != null)
                {
                    request = new RestRequest();
                    request.Resource = "/Organizations/{organizationID}";
                    request.RootElement = "ORGANIZATION";
                    request.AddParameter("organizationID", creator.ORGANIZATION_ID, ParameterType.UrlSegment);
                    ViewData["creatorOrg"] = serviceCaller.Execute<ORGANIZATION>(request).NAME;
                }
                if (creator.DIVISION_ID != 0 && creator.DIVISION_ID != null)
                {
                    request = new RestRequest();
                    request.Resource = "/Divisions/{divisionID}";
                    request.RootElement = "DIVISION";
                    request.AddParameter("divisionID", creator.DIVISION_ID, ParameterType.UrlSegment);
                    ViewData["creatorDiv"] = serviceCaller.Execute<DIVISION>(request).DIVISION_NAME;
                }
            }
            //get the logged in user for publisher info
            USER_ loggedIn = GetLoggedInUser();
            ViewData["loggedIn"] = loggedIn;

            if (loggedIn.ORGANIZATION_ID != 0 && loggedIn.ORGANIZATION_ID != null)
            {
                request = new RestRequest();
                request.Resource = "/Organizations/{organizationID}";
                request.RootElement = "ORGANIZATION";
                request.AddParameter("organizationID", loggedIn.ORGANIZATION_ID, ParameterType.UrlSegment);
                ViewData["publisherOrg"] = serviceCaller.Execute<ORGANIZATION>(request).NAME;
            }
            if (loggedIn.DIVISION_ID != 0 && loggedIn.DIVISION_ID != null)
            {
                request = new RestRequest();
                request.Resource = "/Divisions/{divisionID}";
                request.RootElement = "DIVISION";
                request.AddParameter("divisionID", loggedIn.DIVISION_ID, ParameterType.UrlSegment);
                ViewData["publisherDiv"] = serviceCaller.Execute<DIVISION>(request).DIVISION_NAME;
            }
            else
            {
                request = new RestRequest();
                request.Resource = "/Divisions";
                request.RootElement = "ArrayOfDIVISION";
                List<DIVISION> allDivs = serviceCaller.Execute<List<DIVISION>>(request);
                ViewData["DivisionList"] = allDivs;
            }
            
            //AI TAB
            ViewData["AIPULA"] = AIPULA;
            ViewData["PulaModel"] = PubPulaLists;

            //SPECIES TAB
            //Species

            //PRODUCT TAB
            ViewData["AIProducts"] = AI_ProductList;

            //get months and years lists (1 each for Effective Data and Expiration Date)
            ViewData["EffMonths"] = GetMonthsList();
            ViewData["EffYears"] = GetYearList();
            ViewData["ExMonths"] = GetMonthsList();
            ViewData["ExYears"] = GetYearList();

            return PartialView(AIPULA);
        }

        //determined that shapeId doesn't exist yet in db, here's create popup
        public ActionResult PULA_Create(int shapeId)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();

            //store the logged in user
            USER_ loggedIn = GetLoggedInUser();
            ViewData["User"] = loggedIn;
            ViewData["shapeId"] = shapeId; //store shape id to pass on
                
            //get organization and division (if one)            
            if (loggedIn.ORGANIZATION_ID != 0 && loggedIn.ORGANIZATION_ID != null)
            {
                request.Resource = "Organizations/{organizationID}";
                request.RootElement = "ORGANIZATION";
                request.AddParameter("organizationID", loggedIn.ORGANIZATION_ID, ParameterType.UrlSegment);
                ViewData["Organization"] = serviceCaller.Execute<ORGANIZATION>(request).NAME;
            }
            if (loggedIn.DIVISION_ID != 0 && loggedIn.DIVISION_ID != null)
            {
                request = new RestRequest();
                request.Resource = "Divisions/{divisionID}";
                request.RootElement = "DIVISION";
                request.AddParameter("divisionID", loggedIn.DIVISION_ID, ParameterType.UrlSegment);
                ViewData["Division"] = serviceCaller.Execute<DIVISION>(request).DIVISION_NAME;
            }
            else
            {
                request = new RestRequest();
                request.Resource = "Divisions";
                request.RootElement = "ArrayOfDIVISION";
                List<DIVISION> divList = serviceCaller.Execute<List<DIVISION>>(request);
                ViewData["DivisionList"] = divList;
            }

            //get products 
            //request = new RestRequest();
            //request.Resource = "Products";
            //request.RootElement = "ArrayOfProduct";
            //List<PRODUCT> ProductList = serviceCaller.Execute<List<PRODUCT>>(request);
            //ViewData["ProductList"] = ProductList;
            
            //get lists for AI, Modifiers, Crop Use, Code, AI CLass and CAS NOT WORKING RIGHT NOW 6.27.13
            request = new RestRequest();
            request.Resource = "ActiveIngredients";
            request.RootElement = "ArrayOfACTIVE_INGREDIENT";
            List<ACTIVE_INGREDIENT> aiList = serviceCaller.Execute<List<ACTIVE_INGREDIENT>>(request);
            ViewData["AIList"] = aiList;

            request = new RestRequest();
            request.Resource = "CropUses";
            request.RootElement = "ArrayOfCROP_USE";
            List<CROP_USE> CUList = serviceCaller.Execute<List<CROP_USE>>(request);
            ViewData["CUList"] = CUList;

            request = new RestRequest();
            request.Resource = "ApplicationMethods";
            request.RootElement = "ArrayOfAPPLICATION_METHOD";
            List<APPLICATION_METHOD> appMethodsList = serviceCaller.Execute<List<APPLICATION_METHOD>>(request);
            ViewData["AppMethodsList"] = appMethodsList;

            request = new RestRequest();
            request.Resource = "Formulations";
            request.RootElement = "ArrayOfFORMULATION";
            List<FORMULATION> formulationsList = serviceCaller.Execute<List<FORMULATION>>(request);
            ViewData["FormulationsList"] = formulationsList;

            request = new RestRequest();
            request.Resource = "Limitations";
            request.RootElement = "ArrayOfLIMITATION";
            List<LIMITATION> CodeList = serviceCaller.Execute<List<LIMITATION>>(request);
            ViewData["CodeList"] = CodeList;

            //get species
            request = new RestRequest();
            request.Resource = "SpeciesGroups";
            request.RootElement = "ArrayOfSPECIES_GROUP";
            List<SPECIES_GROUP> SppGrpList = serviceCaller.Execute<List<SPECIES_GROUP>>(request);
            ViewData["SppGrpList"] = SppGrpList;

            //get months and years lists (1 each for Effective Data and Expiration Date)
            ViewData["EffMonths"] = GetMonthsList();
            ViewData["EffYears"] = GetYearList();
            ViewData["ExMonths"] = GetMonthsList();
            ViewData["ExYears"] = GetYearList();

            return PartialView();
        }

         //post to create (populate) the pula
        [HttpPost]
        public Boolean CreatePULA(PULA_Model thisPULA)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);
                
                //pull everything from the fc and sort
                //1. ACTIVE_INGREDIENT_PULA
                ACTIVE_INGREDIENT_PULA anAIPULA = thisPULA.anAIPULA;
                if (!string.IsNullOrWhiteSpace(thisPULA.EffMonths))
                {
                    string effectiveMonth = thisPULA.EffMonths;
                    string effectiveYear = thisPULA.EffYears;
                    string effectiveDate = effectiveMonth + "/01/" + effectiveYear;
                    anAIPULA.EFFECTIVE_DATE = DateTime.Parse(effectiveDate);
                }
                                
                request.Resource = "/PULAs";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<ACTIVE_INGREDIENT_PULA>(anAIPULA), ParameterType.RequestBody);
                //ACTIVE_INGREDIENT_PULA createdPULA = serviceCaller.Execute<ACTIVE_INGREDIENT_PULA>(request);
                
                //VERSION ..services is handling this

                if (!string.IsNullOrWhiteSpace(thisPULA.ExMonths))
                {
                    string expiredMonth = thisPULA.ExMonths;
                    string expiredYear = thisPULA.ExYears;
                    string expireDate = expiredMonth + "/01/" + expiredYear;
                    DateTime ExpireDate = DateTime.Parse(expireDate);
                    //2. send to 'expire method in aiPULA handler "ExpirePULA"
                    ///PULAs/Expire?pulaID={pulaID}&ExpireDate={date}
                    request = new RestRequest();
                    request.Resource = "/PULAs/Expire?pulaID={pulaID}&ExpireDate={date}";
                    //request.AddParameter("pulaID", createdPULA.PULA_ID, ParameterType.UrlSegment);
                    //request.AddParameter("date", ExpireDate, ParameterType.UrlSegment);
                    //serviceCaller.Execute<ACTIVE_INGREDIENT_PULA>(request);
                }

                //SPECIES_ACTIVE_INGREDIENT_PULA
                SpeciesList theSPpList = new SpeciesList();
                if (!string.IsNullOrWhiteSpace(thisPULA.SpeciesToAdd))
                {
                    List<Int32> speciesIDs = new List<int>();
                    //parse
                    string[] spp = Regex.Split(thisPULA.SpeciesToAdd, ",");
                    //put them into a list of ints to add to the simpleSpecies
                    foreach (string sp in spp)
                    {
                        speciesIDs.Add(Convert.ToInt32(sp));
                    }
                    theSPpList.Species = speciesIDs.Select(s => new SimpleSpecies { ID = s} ).ToList<SimpleSpecies>();

                    request = new RestRequest(Method.POST);
                    request.Resource = "PULAs/{entityID}/AddSpeciesToPULA?ActiveDate={date}";
                    //request.AddParameter("entityID", createdPULA.ID, ParameterType.UrlSegment);
                    //request.AddHeader("Content-Type", "application/xml");
                    ////Use extended serializer
                    //serializer = new BLTWebSerializer();
                    //request.AddParameter("application/xml", serializer.Serialize<SpeciesList>(theSPpList), ParameterType.RequestBody);
                    //SpeciesList createdAIsppList = serviceCaller.Execute<SpeciesList>(request);
                }

                //AI_LIMITATIONS
                List<AI_LIMITATIONS> limitations = new List<AI_LIMITATIONS>();
                //parse
                if (!string.IsNullOrWhiteSpace(thisPULA.aiIDsToAdd))
                {
                    string[] AIs = Regex.Split(thisPULA.aiIDsToAdd, ",");
                    if (!string.IsNullOrWhiteSpace(thisPULA.prodIDsToAdd))
                    {
                        string[] PRs = Regex.Split(thisPULA.prodIDsToAdd, ",");
                    }
                    if (!string.IsNullOrWhiteSpace(thisPULA.useIDsToAdd))
                    {
                        string[] Uses = Regex.Split(thisPULA.useIDsToAdd, ",");
                        if (!string.IsNullOrWhiteSpace(thisPULA.appMethsIDsToAdd))
                        {
                            string[] AppMethods = Regex.Split(thisPULA.appMethsIDsToAdd, ",");
                            if (!string.IsNullOrWhiteSpace(thisPULA.codeIDsToAdd))
                            {
                                string[] Codes = Regex.Split(thisPULA.codeIDsToAdd, ",");
                                if (!string.IsNullOrWhiteSpace(thisPULA.formsIDsToAdd))
                                {
                                    string[] Forms = Regex.Split(thisPULA.formsIDsToAdd, ",");
                                    //now i have all 4 string[]'s here, populated.

                                    for (int i = 0; i < AIs.Length; i++) //length of AIs or of Product...????
                                    {
                                        AI_LIMITATIONS aLimitation = new AI_LIMITATIONS();
                                        aLimitation.ACTIVE_INGREDIENT_ID = Convert.ToDecimal(AIs[i]);
                                        //aLimitation.PRODUCT_IDs = Convert.ToDecimal(PRs[i]); ???
                                        aLimitation.CROP_USE_ID = Convert.ToDecimal(Uses[i]);
                                        aLimitation.APPLICATION_METHOD_ID = Convert.ToDecimal(AppMethods[i]);
                                        aLimitation.FORMULATION_ID = Convert.ToDecimal(Forms[i]);
                                        aLimitation.LIMITATION_ID = Convert.ToDecimal(Codes[i]);
                                        //aLimitation.PULA_ID = createdPULA.PULA_ID;
                                        limitations.Add(aLimitation);
                                    }
                                }
                            }
                        }
                    }
                }
                //now that i have the ai-limitations, post them
                foreach (AI_LIMITATIONS ail in limitations)
                {
                    //post it
                    request = new RestRequest(Method.POST);
                    request.Resource = "AILimitations";
                    request.AddHeader("Content-Type", "application/xml");
                    //Use extended serializer
                    serializer = new BLTWebSerializer();
                    request.AddParameter("application/xml", serializer.Serialize<AI_LIMITATIONS>(ail), ParameterType.RequestBody);
                    //AI_LIMITATIONS createdAILimit = serviceCaller.Execute<AI_LIMITATIONS>(request);
                }

                return true;
            }
            catch 
            {
                return false;
            }
        }
        
        //picked a product from dropdown, return list of active ingredients in this product
        public JsonResult GetProductsByAI(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/ActiveIngredients/{activeIngredientID}/Product?ActiveDate={date}";
            request.RootElement = "ArrayOfPRODUCT";
            request.AddParameter("activeIngredientID", id, ParameterType.UrlSegment);

            List<PRODUCT> Prodlist = serviceCaller.Execute<List<PRODUCT>>(request);

            return Json(Prodlist);
        }
        
        //picked a group from dropdown, return list of species that are of that group
        public JsonResult GetSpeciesByGroup(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "Species";
            request.RootElement = "ArrayOfSpecies";
            List<SPECIES> SppList = serviceCaller.Execute<List<SPECIES>>(request);

            List<SPECIES> GrpSpp = SppList.Where(s => s.SPECIES_GROUP_ID == id).ToList();

            return Json(GrpSpp);
        }

        //edit button clicked in pula_details
        //GET: /PULA_Edit/11
        public ActionResult PULA_Edit(int id)
        {
            //return a form populated with all the same info as details, but editable
            //this new pula will have a new versionID
            return View();
        }

        //post the new pula
        //POST: /PULA_Edit/11
        [HttpPost]
        public ActionResult PULA_Edit(ACTIVE_INGREDIENT_PULA newPULA, int id)
        {
            //save the new pula, not yet publish it
            //old one this one is based off of - set expires date 1 month prior to this active date
            return RedirectToAction("ThankYou");
        }

        //pula has been saved, thank you page
        //GET: /ThankYou
        public ActionResult ThankYou()
        {
            //pula was successfully saved, here's the thank you page with a close button. when user clicks pula again, will
            //have publish option available.
            return View();
        }
        

        //called often to get user logged in
        //call for who the member logged in is 
        private USER_ GetLoggedInUser()
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "Users?username={userName}";
            request.RootElement = "USER_";
            request.AddParameter("userName", User.Identity.Name, ParameterType.UrlSegment);
            USER_ loggedInUser = serviceCaller.Execute<USER_>(request);
            //int loggedInMember = Convert.ToInt32(loggedInUser.ROLE_ID);
            //string Role = string.Empty;
            //switch (loggedInMember)
            //{
            //    case 1: Role = "Admin"; break;
            //    case 2: Role = "Publish"; break;
            //    case 3: Role = "Create"; break;
            //    case 4: Role = "Enforce"; break;
            //    case 5: Role = "Public"; break;
            //    default: Role = "error"; break;
            //}

            return loggedInUser;
        }

        //populate a list for Months
        private List<SelectListItem> GetMonthsList()
        {
            List<SelectListItem> Months = new List<SelectListItem>();
            Months.Add(new SelectListItem { Text = "January", Value = "1" });
            Months.Add(new SelectListItem { Text = "February", Value = "2" }); 
            Months.Add(new SelectListItem { Text = "March", Value = "3" });
            Months.Add(new SelectListItem { Text = "April", Value = "4" });
            Months.Add(new SelectListItem { Text = "May", Value = "5" });
            Months.Add(new SelectListItem { Text = "June", Value = "6" });
            Months.Add(new SelectListItem { Text = "July", Value = "7" });
            Months.Add(new SelectListItem { Text = "August", Value = "8" });
            Months.Add(new SelectListItem { Text = "September", Value = "9" });
            Months.Add(new SelectListItem { Text = "October", Value = "10" });
            Months.Add(new SelectListItem { Text = "November", Value = "11" });
            Months.Add(new SelectListItem { Text = "December", Value = "12" });
            return Months;
        }

        //populate a list for Years
        private List<SelectListItem> GetYearList()
        {
            List<SelectListItem> Years = new List<SelectListItem>();
            Years.Add(new SelectListItem { Text = (DateTime.Now.Year).ToString(), Value = (DateTime.Now.Year).ToString() });
            Years.Add(new SelectListItem { Text = (DateTime.Now.AddYears(1).Year).ToString(), Value = (DateTime.Now.AddYears(1).Year).ToString() });
            Years.Add(new SelectListItem { Text = (DateTime.Now.AddYears(2).Year).ToString(), Value = (DateTime.Now.AddYears(2).Year).ToString() });
            Years.Add(new SelectListItem { Text = (DateTime.Now.AddYears(3).Year).ToString(), Value = (DateTime.Now.AddYears(3).Year).ToString() });
            Years.Add(new SelectListItem { Text = (DateTime.Now.AddYears(4).Year).ToString(), Value = (DateTime.Now.AddYears(4).Year).ToString() }); 
            return Years;
        }
    }
}
