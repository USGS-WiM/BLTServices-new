//Copyright 2013 USGS Wisconsin Internet Mapping(WiM)
//Author: Tonia Roddick
//Created: December 1st, 2013	

dojo.require("esri.map");
dojo.require("esri.dijit.Popup");
dojo.require("esri.dijit.Legend");
dojo.require("esri.dijit.BasemapGallery");
dojo.require("esri.arcgis.utils");
dojo.require("esri.virtualearth.VETiledLayer");
dojo.require("esri.tasks.locator");
dojo.require("esri.graphic");
dojo.require("esri.tasks.query");
dojo.require("esri.utils");

dojo.require("dijit.TitlePane");
dojo.require("dijit.Tooltip");
dojo.require("dijit.Toolbar");
dojo.require("dijit.Menu");
dojo.require("dijit.TooltipDialog");

dojo.require("dijit.layout.BorderContainer");
dojo.require("dijit.layout.ContentPane");

dojo.require("dijit.form.CheckBox");
dojo.require("dijit.form.Button");
dojo.require("dijit.form.ComboBox");
dojo.require("dijit.form.DropDownButton");
dojo.require("dijit.form.FilteringSelect");
dojo.require("dijit.Dialog");
dojo.require("dojox.data.XmlStore");

dojo.require("wim.ExtentNav");
dojo.require("wim.LatLngScale");
dojo.require("wim.CollapsingContainer");
dojo.require("wim.Disclaimer");
dojo.require("modules.SiteFilter");
dojo.require("wim.RefreshScreen");
dojo.require("wim.LoadingScreen");


//global variables     
var map, legendLayers = [];
var identifyTask, identifyParams;
var navToolbar;
var locator;
var pulaLayer;
Date.prototype.today = function () {
    return (this.getMonth() + 1) + "/" + this.getDate() + "/" + this.getFullYear()
};
var newDate = new Date();
var datetime = newDate.today();
var EventListResponse = false;
var AIListResponse = false;
var PULA_queryTask;
var ExtentQuery;
var eventID;
var eventIDExists = false;
var layerDefinition = [];

function init() {

    //point to proxy
    esri.config.defaults.io.proxyUrl = "/BLTProxy/proxy.ashx";
    esri.config.defaults.io.alwaysUseProxy = true;

	//sets up the onClick listener for the USGS logo
	//dojo.connect(dojo.byId("usgsLogo"), "onclick", showUSGSLinks);
	
	// a popup is constructed below from the dijit.Popup class, which extends some addtional capability to the InfoWindowBase class.
	//var popup = new esri.dijit.Popup({},dojo.create("div"));
	
	//IMPORANT: map object declared below. Basic parameters listed here. 
	//String referencing container id for the map is required (in this case, "map", in the parens immediately following constructor declaration).
	//Default basemap is set using "basemap" parameter. See API reference page, esri.map Constructor Detail section for parameter info. 
	//For template's sake, extent parameter has been set to contiguous US.
	//sliderStyle parameter has been commented out. Remove comments to get a large slider type zoom tool (be sure to fix CSS to prevent overlap with other UI elements)
	//infoWindow parameter sets what will be used as an infoWindow for a map click. 
	//If using FeatureLayer,an infoTemplate can be set in the parameters of the FeatureLayer constructor, which will automagically generate an infoWindow.	 
	map = new esri.Map("map", {
    	basemap: "topo",
		wrapAround180: true,
		extent: new esri.geometry.Extent({xmin:-14580516.019450117,ymin:2072972.2070934423,xmax:-5618427.327072154,ymax:7527518.54552217,spatialReference:{wkid:102100}}), 
		slider: true,
		sliderStyle: "small", //use "small" for compact version, "large" for long slider version
		logo:false
		//infoWindow: popup
	});
	
	//navToolbar constructor declared, which serves the extent navigator tool.
    navToolbar = new esri.toolbars.Navigation(map);
	
	//dojo.connect method (a common Dojo framework construction) used to call mapReady function. Fires when the first or base layer has been successfully added to the map.
    dojo.connect(map, "onLoad", mapReady);
	
	//basemapGallery constructor which serves the basemap selector tool. List of available basemaps can be customized. Here,default ArcGIS online basemaps are set to be available.
	var basemapGallery = new esri.dijit.BasemapGallery({
		showArcGISBasemaps: true,
		map: map
	}, "basemapGallery");
	basemapGallery.startup();
	
	//basemapGallery error catcher
	dojo.connect(basemapGallery, "onError", function() {console.log("Basemap gallery failed")});
	
	//calls the executeSiteIdentifyTask function from a click on the map. 
	dojo.connect(map, "onClick", executePULATask);


	//need to call to parent to see if an eventID is there, if so: only show those PULAs, else: show all
	eventID = top.window.GetEventID();
	if (eventID >= 1) {
	    eventIDExists = true;
	}
	//declaration of layers. ArcGISDynamicMapServiceLayer used, with one FeatureLayer at the end. See API documentation for available constructor parameters.  
	//under the layer declaration, the layer and its desired alias for the legend and toggle elements are pushed to the legendLayers array, which informs 
	//the legend element and toggle (checkbox) elements.

	
	//QueryRelatedTable();

    //Pending PULAs (empty- have not been populated yet)

	pulaLayer = new esri.layers.ArcGISDynamicMapServiceLayer("http://wim.usgs.gov/arcgis/rest/services/BLT/BLT_PULAs/MapServer/", { "visible": true, "opacity": 0.5 });
	

	legendLayers.push({ layer: pulaLayer, title: 'PULAs' });
    
    //IMPORTANT: This is where the layers are added to the map. Normally, this would be a simple list of variables. In this build, the layer variable names must be contained witin
	//an array bracket because the layer info has been placed inside the legendLayers array for the construction of a legend and toggle buttons.
	//IMPORTANT: Layers will be placed in ascending order from the order in this list. i.e., the first layer listed will be on bottom, the last layer listed will be on top.
	map.addLayers([pulaLayer]);

    //pending
	layerDefinition[0] = "BLTADMIN.%PULAVERSION.PULA_SHAPE_ID IS NULL";
	var d = new Date();
	var formatDate = dojo.date.locale.format(d, { datePattern: "yyyy-MM-dd", selector: "date" });
	//created
    layerDefinition[1] = "BLTADMIN.%PULAVERSION.CREATED_TIME_STAMP <= DATE '" + formatDate + "' AND BLTADMIN.%PULAVERSION.PUBLISHED_TIME_STAMP IS NULL";
	//published
    layerDefinition[2] = "BLTADMIN.%PULAVERSION.PUBLISHED_TIME_STAMP <= DATE '" + formatDate + "' AND BLTADMIN.%PULAVERSION.EXPIRED_TIME_STAMP IS NULL";
	//expired
    layerDefinition[3] = "BLTADMIN.%PULAVERSION.EXPIRED_TIME_STAMP <= DATE '" + formatDate + "'";
	pulaLayer.setLayerDefinitions(layerDefinition);
    
    //this function fires after all layers have been added to map with the map.addLayers method above.
	//this function creates the legend element based on the legendLayers array which contains the relevant data for each layer. 
	dojo.connect(map,'onLayersAddResult',function(results){
		var legend = new esri.dijit.Legend({
			map:map,
			layerInfos:legendLayers
		},"legendDiv");
		legend.startup();
		
		//this forEach loop generates the checkbox toggles for each layer by looping through the legendLayers array (same way the legend element is generated). 
		dojo.forEach (legendLayers, function(layer){
			var layerName = layer.title;
			var checkBox = new dijit.form.CheckBox({
				name:"checkBox" + layer.layer.id,
				value:layer.layer.id,
				checked:layer.layer.visible,
				onChange:function(evt){
					var checkLayer = map.getLayer(this.value);
					checkLayer.setVisibility(!checkLayer.visible);
					this.checked = checkLayer.visible;						
				}
			});
			if (layer.zoomScale) {
				//create the holder for the checkbox and zoom icon
				var toggleDiv = dojo.doc.createElement("div");
				dojo.place(toggleDiv,dojo.byId("toggle"),"after");
				dojo.place(checkBox.domNode,toggleDiv,"first");
				var checkLabel = dojo.create('label',{'for':checkBox.name,innerHTML:layerName},checkBox.domNode,"after");
				var scale = layer.zoomScale;
				var zoomImage = dojo.doc.createElement("div");
				zoomImage.id = 'zoom' + layer.layer.id;
				zoomImage.innerHTML = '<img id="zoomImage" style="height: 18px;width: 18px" src="images/zoom.gif" />';
				dojo.connect(zoomImage, "click", function() {
					if (map.getScale() > scale) {
						map.setScale(scale);;
					}
				});
				dojo.place(zoomImage,toggleDiv,"last");
				dojo.setStyle(checkBox.domNode, "float", "left");
				dojo.setStyle(checkLabel, "float", "left");
				dojo.setStyle(toggleDiv, "paddingTop", "5px");
				dojo.setStyle(dojo.byId("zoomImage"), "paddingLeft", "10px");
				dojo.setStyle(toggleDiv, "height", "25px");
				//dojo.byId("toggle").appendChild(zoomImage);
				//dojo.appendChild(zoomImage.domNode,dojo.byId("toggle"),"after");
				
				dojo.place("<br/>",zoomImage,"after");
			} else {
				dojo.place(checkBox.domNode,dojo.byId("toggle"),"after");
				var checkLabel = dojo.create('label',{'for':checkBox.name,innerHTML:layerName},checkBox.domNode,"after");
				dojo.place("<br/>",checkLabel,"after");
			}
		}); //end dojo.foreach
    }); //end dojo.connect

    //if there is an eventID, means cooperator is logged in, only show those event based PULAs
    if (eventIDExists) {
        GetEventPULAs();
    }
    else {
        document.getElementById("userTools").style.visibility="visible";
    }
	/////////////// Request and Dropdown Populating for EVENT ////////////////////////////////
	var EventRequest = esri.request({
	    url: "http://107.20.182.222/BLTServices/Events",
	    handleAs: "xml"
	});
	EventRequest.then(EventRequestSucceeded, EventRequestFailed);

	//successful: populate the dropdown
	function EventRequestSucceeded(data) {
	    var select = document.getElementById("eventSelectInput");

	    //first option will default to all
	    var so = document.createElement("option");
	    so.textContent = "All";
	    so.value = "0";
	    select.appendChild(so);
	    //now get the rest of the EVENTS
	    var HTMLstuff = data.documentElement.children;
	    var collection = Array.prototype.slice.call(HTMLstuff); //convert nodeList to array to be able to use array methods
	    for (var i = 0; i < collection.length; i++) {
	        var opt = collection[i];
	        var el = document.createElement("option");
	        el.textContent = opt.children[2].textContent;
	        el.value = opt.children[1].textContent;
	        select.appendChild(el);
	    }
	    //set global variable to true and test to see if all others are done yet
	    EventListResponse = true;
	    if (AIListResponse == true && EventListResponse == true) {
	        AllDone();
	    }
	}

	function EventRequestFailed(error) {
	    console.log("Error: ", error.message);
	}
	/////////// end Event Request and Dropdown populating //////////////////////    

	/////////////// Request and Dropdown Populating for ACTIVE INGREDIENT ////////////////////////////////
    var AIRequest = esri.request({
	    url: "http://107.20.182.222/BLTServices/ActiveIngredients?publishedDate=" + datetime,
	    handleAs: "xml"
	});
	AIRequest.then(AIRequestSucceeded, AIRequestFailed);

	//function for request to get AI
	function AIRequestSucceeded(data) {
	    var AIselect = document.getElementById("AISelectInput");
	    
        //first option will default to all
        var so = document.createElement("option");
	    so.textContent = "All";
	    so.value = "0";
	    AIselect.appendChild(so);
	    //now get the rest of the ACTIVE INGREDIENTS
	    var HTMLstuff = data.documentElement.children;
	    var collection = Array.prototype.slice.call(HTMLstuff);
	    for (var i = 0; i < collection.length; i++) {
	        var opt = collection[i];
	        var el = document.createElement("option");
	        el.textContent = (opt.children[2].textContent).substring(0, 40);
	        el.title = opt.children[2].textContent;
	        el.value = opt.children[1].textContent;
	        AIselect.appendChild(el);
	    }
	    //set global variable to true and test to see if all others are done yet
	    AIListResponse = true;
	    if (AIListResponse == true && EventListResponse == true) {
	        AllDone();
	    }
	}

	function AIRequestFailed(error) {
	    console.log("Error: ", error.message);
	}
	/////////// end AI Request and Dropdown populating //////////////////////

	//OPTIONAL: the below remaining lines within the init function are for performing an identify task on a layer in the mapper. 
	// the following 7 lines establish an IdentifyParameters object(which is an argument for an identifyTask.execute method)and specifies the criteria used to identify features. 
	// the constructor of the identifyTask is especially important. the service URL there should match that of the layer from which you'd like to identify.
	identifyParams = new esri.tasks.IdentifyParameters();
    identifyParams.tolerance = 15;
    identifyParams.returnGeometry = true;
    identifyParams.layerOption = esri.tasks.IdentifyParameters.LAYER_OPTION_TOP;
    identifyParams.width  = map.width;
    identifyParams.height = map.height;
    identifyTask = new esri.tasks.IdentifyTask("http://wim.usgs.gov/arcgis/rest/services/BLT/BLT_PULAs/MapServer");

    
	//OPTIONAL: the following function carries out an identify task query on a layer and returns attributes for the feature in an info window according to the 
	//InfoTemplate defined below. It is also possible to set a default info window on the layer declaration which will automatically display all the attributes 
	//for the layer in the order they come from the table schema. This code below creates custom labels for each field and substitutes in the value using the notation ${[FIELD NAME]}. 
    function executePULATask(evt) {
        identifyParams.geometry = evt.mapPoint;
        identifyParams.mapExtent = map.extent;
       
	    // the deferred variable is set to the parameters defined above and will be used later to build the contents of the infoWindow.
        var deferredResult = identifyTask.execute(identifyParams);

        deferredResult.addCallback(function(response) {     
            // response is an array of identify result objects    
            // dojo.map is used to set the variable feature to each result in the response array and apply the same template to each of those features, 
            return dojo.map(response, function(result) {
                var feature = result.feature;
                feature.attributes.layerName = result.layerName;
                //if (feature.attributes.layerName == "PULAShapes") {
                    var ShapeID = feature.attributes.PULASHPID;
                    parent.Shape_Click(ShapeID);
                //}
            });
        });
    }
	//end executeSiteIdentifyTask method    

	//Geocoder reference to geocoding services
    locator = new esri.tasks.Locator("http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer");
	//calls the function that does the goeocoding logic (found in geocoder.js, an associated JS module)*
    dojo.connect(locator, "onAddressToLocationsComplete", showResults);
}//end of init function	

function mapReady(map){ 	
	//Sets the globe button on the extent nav tool to reset extent to the initial extent.
	dijit.byId("extentSelector").set("initExtent", map.extent);  
	
	//Create scale bar programmatically because there are some event listeners that can't be set until the map is created.
	//Just uses a simple div with id "latLngScaleBar" to contain it
	var latLngBar = new wim.LatLngScale({ map: map }, 'latLngScaleBar');

//	dojo.connect(map, "onClick", function (evt) {
//	    for (var i = 0; i < map.layerIds.length; i++) {
//	        if (map.getLayer(map.layerIds[i]).visible == true) {
//	            var identifyStnSite = new esri.tasks.IdentifyTask("http://wim.usgs.gov/arcgis/rest/services/BLT/BLT_PULAs/MapServer");
//	            identifyParams = new esri.tasks.IdentifyParameters();
//	            identifyParams.tolerance = 5;
//	            identifyParams.returnGeometry = true;
//	            identifyParams.layerIds = [0];
//	            identifyParams.layerOption = esri.tasks.IdentifyParameters.LAYER_OPTION_ALL;
//	            identifyParams.width = map.width;
//	            identifyParams.height = map.height;
//	            identifyParams.geometry = evt.mapPoint;
//	            identifyParams.mapExtent = map.extent;
//	            identifyStnSite.execute(identifyParams, function (identifyResults) {
//	                //                        var stnSiteId = identifyResults[0].feature.attributes.SITE_ID;
//	                //                        var siteName = identifyResults[0].feature.attributes.SITE_NAME;
//	                //                        map.infoWindow.setTitle(siteName);
//	                //                        map.infoWindow.setContent("<iframe style='width:100%; height:425px;' src='/STNWeb/Sites/PopupSitesDetailsPV/" + stnSiteId + "'/>");
//	                //                        map.infoWindow.resize(475, 475);
//	                //                        map.infoWindow.show(evt.mapPoint,map.getInfoWindowAnchor(evt.screenPoint));
//	            });
//	        }
//	    }
//	});  //end dojo.connect

       
	dojo.style('loadingScreen', 'opacity', '0.75');
	var loadingUpdate = dojo.connect(map, "onUpdateStart", function () {
	    dojo.style('loadingScreen', 'visibility', 'visible');
	});

	dojo.connect(map, "onUpdateEnd", function () {
	    dojo.disconnect(loadingUpdate);

	    dojo.connect(map, "onUpdateStart", function () {
	        dojo.style('refreshScreen', 'visibility', 'visible');
	    });

	    dojo.connect(map, "onUpdateEnd", function () {
	        dojo.style('refreshScreen', 'visibility', 'hidden');
	    });

	});
}

//function to hide the loading div
function AllDone() {
    dojo.style('loadingScreen', 'visibility', 'hidden');
}

//Get contributor polygons based off the EventId
function GetEventPULAs() {
    var returningEventPULAs;
    window.top.GetEventPULAs(eventID, function (result) {
        returningEventPULAs = result;
    });

    setTimeout(function () {
        if (returningEventPULAs != undefined) {
            //put the shapeIDs into an array
            var ShapeIDarray = [];

            for (var i = 0; i < returningEventPULAs.length; i++) {
                ShapeIDarray[i] = returningEventPULAs[i].ShapeID;
            }

            //set the layerDefinition
            var layerDefinitions = [];
            var i = 0;
            while (i < returningEventPULAs.length) {
                if (layerDefinitions.length > 0) {
                    if (i == returningEventPULAs.length - 1) {
                        layerDefinitions[0] += "SHAPE_ID = " + ShapeIDarray[i];
                    }
                    else {
                        layerDefinitions[0] += "SHAPE_ID = " + ShapeIDarray[i] + " or ";
                    }
                }
                else {
                    layerDefinitions[0] = "SHAPE_ID = " + ShapeIDarray[i] + " or ";
                }
                i++;
            }

            pulaLayer.setLayerDefinitions(layerDefinitions);
            dojo.style('refreshScreen', 'visibility', 'hidden');

            //do a query to get geometry of results (returningPULAs) and set that as extent
            ZoomToExtent(layerDefinitions[0]);

        }
    }, 3000);
}

//function that sends filtered choices to the services to get corresponding shape IDs
//On Submit Click
function executeUpdatePULAs() {
    dojo.style('refreshScreen', 'visibility', 'visible');
    //get chosen values
    var date = document.getElementById("startDate").value;

    var e = document.getElementById("eventSelectInput");
    var event_value = e.options[e.selectedIndex].value;
   
    var prod_value = document.getElementById("hiddenProdID").value;
    if (prod_value == "") {
        prod_value = "0"
    }
    //var prod_value = document.getElementsByTagName("option")[prod_index].value;
   
    var AI = document.getElementById("AISelectInput");
    var AI_value = AI.options[AI.selectedIndex].value;
    
    var returningPULAs;
    window.top.GetFilteredShapes(date, event_value, prod_value, AI_value, function (result) {
        returningPULAs = result;
    });

    setTimeout(function () {
        if (returningPULAs != undefined && returningPULAs.length != 0) {
            //put the shapeIDs into an array
            var ShapeIDarray = [];

            for (var i = 0; i < returningPULAs.length; i++) {
                ShapeIDarray[i] = returningPULAs[i].ShapeID;
            }

            //set the layerDefinition
            //created shape_id = ... and date is >= create date and published date is null
            //published shape id = ... and date is >= published date and expired date is null
            //expired shape id = .. and date is ....
            
            var i = 0;
            while (i < returningPULAs.length) {
                if (layerDefinition.length > 0) {
                    if (i == returningPULAs.length - 1) {
                        layerDefinition[0] += "SHAPE_ID = " + ShapeIDarray[i];
                        //layerDefinition[1] += ...;
                        //layerDefinition[2] += ...;
                    }
                    else {
                        layerDefinition[0] += "SHAPE_ID = " + ShapeIDarray[i] + " or ";
                    }
                }
                else {
                    layerDefinition[0] = "SHAPE_ID = " + ShapeIDarray[i] + " or ";
                }
                i++;
            }
            pulaLayer.setLayerDefinitions(layerDefinition);
            dojo.style('refreshScreen', 'visibility', 'hidden');

            //do a query to get geometry of results (returningPULAs) and set that as extent
            ZoomToExtent(layerDefinitions[0]);
        }
        else {
            alert("No PULAs matching this filter were returned");
            dojo.style('refreshScreen', 'visibility', 'hidden');
            $("#startDate").val("");
            $("#eventSelectInput").val("");
            $("#AISelectInput").val("");
            $("#hiddenProdID").val(""); 
        }
    }, 3000);

    //var spacing;
}

//clear the filter choices and see all the PULAs
function executeClearFilter() {
    //clear date
    $("#startDate").val("");

    //set event to all
    $("#eventSelectInput").val("");
 
    //set AI to all
    $("#AISelectInput").val("");

    //set Product to all
    $("#hiddenProdID").val(""); 

    //set layerDefinition to get all
    var layerDefinitions = [];
    layerDefinitions[0] = "1=1";
    pulaLayer.setLayerDefinitions(layerDefinitions);
}

//query related table to show/hide polygons for each layer (pending through expired)
function QueryRelatedTable() {
    var RelatedTbl_queryTask = new esri.tasks.QueryTask("http://wim.usgs.gov/arcgis/rest/services/BLT/BLT_PULAs/MapServer/4");
    var createdQuery = new esri.tasks.Query();
    createdQuery.returnGeometry = true;
    createdQuery.outFields = ["PULA_SHAPE_ID"];
    createdQuery.where = "CREATED_TIME_STAMP IS NOT NULL AND PUBLISHED_TIME_STAMP IS NULL";

    RelatedTbl_queryTask.execute(createdQuery, gatherIDs);
}

function gatherIDs(results) {
    var something = "what's the problem";
}

//called from GetEventPULAs and executeUpdatePULAs(submit click from filter)
function ZoomToExtent(layerDefinitions) {
    PULA_queryTask = new esri.tasks.QueryTask("http://wim.usgs.gov/arcgis/rest/services/BLT/BLT_PULAs/MapServer/0");
    ExtentQuery = new esri.tasks.Query();
    ExtentQuery.returnGeometry = true;
    ExtentQuery.outFields = ["SHAPE_ID"];
    ExtentQuery.where = layerDefinitions;

    PULA_queryTask.execute(ExtentQuery, showResults);
}

//called from ZoomToExtent, execute queryTask
function showResults(results) {
    var identifyGraphics = [];
    var graphicExtent = results.features[0].geometry.getExtent();
    for (var i = 1, il = results.features.length; i < il; i++) {
        var anExtent = results.features[i].geometry.getExtent();
        graphicExtent = graphicExtent.union(anExtent);
    }
    map.setExtent(graphicExtent, true);
}

//remove (destroy) the usgs Links div (called on mouseleave event)
function removeLinks(){
	dojo.destroy('usgsLinks');
}
dojo.ready(init);