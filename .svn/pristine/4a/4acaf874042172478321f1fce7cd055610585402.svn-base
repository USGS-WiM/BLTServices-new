//------------------------------------------------------------------------------
//----- PartsController.cs-----------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Tonia Roddick USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Display a master Parts page and link to individual parts pages 
//
//discussion:   
//
//     

#region Comments
// 05.30.13 - TR - Added Species
// 05.29.13 - TR - Added Product
// 05.28.13 - TR - Hooked into services
// 04.23.13 - TR - Created

#endregion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Objects.DataClasses;
using System.Text;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Xml;

using RestSharp;
using BLTServices;
using BLTServices.Authentication;
using BLTWeb.Utilities;
using BLTWeb.Models;
using BLTWeb.Helpers;

namespace BLTWeb.Controllers
{
    [RequireSSL]
    [Authorize]
    public class PartsController : Controller
    {
        //
        // GET: /Parts/
        public ActionResult Index()
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();

            //get the role of user logged in
            ViewData["Role"] = GetLoggedInMember();

            #region Product
            request.Resource = "/Products?ActiveDate={date}";
            request.RootElement = "ArrayOfPRODUCT";
            List<PRODUCT> ProductList = serviceCaller.Execute<List<PRODUCT>>(request);
            ViewData["ProductList"] = ProductList;
            #endregion Product

            #region CropUse
            request = new RestRequest();
            request.Resource = "/CropUses?ActiveDate={date}";
            request.RootElement = "ArrayOfCROP_USE";
            List<CROP_USE> CropUseList = serviceCaller.Execute<List<CROP_USE>>(request);
            ViewData["CropUseList"] = CropUseList;
            #endregion CropUse

            #region LimitationCodes
            request.Resource = "/Limitations?ActiveDate={date}";
            request.RootElement = "ArrayOfLIMITATIONS";
            List<LIMITATION> LimitationList = serviceCaller.Execute<List<LIMITATION>>(request);
            ViewData["LimitationList"] = LimitationList;
            #endregion LimitationCodes
                        
            #region Modifier
            request = new RestRequest();
            request.Resource = "/Modifiers?ActiveDate={date}";
            request.RootElement = "ArrayOfMODIFIER";
            List<MODIFIER> ModList = serviceCaller.Execute<List<MODIFIER>>(request);
            ViewData["ModList"] = ModList;
            #endregion Modifier
            
            #region AI
            request = new RestRequest();
            request.Resource = "/ActiveIngredients?ActiveDate={date}";
            request.RootElement = "ArrayOfACTIVE_INGREDIENT";
            List<ACTIVE_INGREDIENT> aiList = serviceCaller.Execute<List<ACTIVE_INGREDIENT>>(request);
            ViewData["AIList"] = aiList;
            #endregion AI

            #region AI Class
            request = new RestRequest();
            request.Resource = "/AIClasses?ActiveDate={date}";
            request.RootElement = "ArrayOfAI_CLASS";
            List<AI_CLASS> AIClassList = serviceCaller.Execute<List<AI_CLASS>>(request);
            ViewData["AIClassList"] = AIClassList;
            #endregion  AI Class

            #region Spp
            request.Resource = "/Species/";
            request.RootElement = "ArrayOfSPECIES";
            List<SPECIES> SpeciesList = serviceCaller.Execute<List<SPECIES>>(request);
            //build spp model to hold all pieces
            List<SpeciesModel> SppModelList = new List<SpeciesModel>();

            foreach (SPECIES sp in SpeciesList)
            {
                SpeciesModel eachSpp = new SpeciesModel();
                eachSpp.SppID = sp.SPECIES_ID.ToString();
                eachSpp.CommonName = sp.COMMON_NAME;
                eachSpp.ScienName = sp.SCIENTIFIC_NAME;
                
                //get family, group, and taxa
                request = new RestRequest();
                request.Resource = "/SpeciesFamilies/{speciesFamilyID}";
                request.RootElement = "SPECIES_FAMILY";
                request.AddParameter("speciesFamilyID", sp.SPECIES_FAMILY_ID, ParameterType.UrlSegment);
                eachSpp.Family = serviceCaller.Execute<SPECIES_FAMILY>(request).FAMILY;

                request = new RestRequest();
                request.Resource = "/SpeciesGroups/{speciesGroupID}";
                request.RootElement = "SPECIES_GROUP";
                request.AddParameter("speciesGroupID", sp.SPECIES_GROUP_ID, ParameterType.UrlSegment);
                eachSpp.Group = serviceCaller.Execute<SPECIES_GROUP>(request).SP_GROUP;

                request = new RestRequest();
                request.Resource = "/SpeciesTaxas/{speciesTaxaID}";
                request.RootElement = "SPECIES_TAXA";
                request.AddParameter("speciesTaxaID", sp.SPECIES_TAXA_ID, ParameterType.UrlSegment);
                eachSpp.Taxa = serviceCaller.Execute<SPECIES_TAXA>(request).TAXA;

                SppModelList.Add(eachSpp);
            }
            
            ViewData["SpeciesList"] = SppModelList;
            #endregion Spp

            #region Organization
            request = new RestRequest();
            request.Resource = "/Organizations/";
            request.RootElement = "ArrayOfORGANIZATION";
            List<ORGANIZATION> OrganizationList = serviceCaller.Execute<List<ORGANIZATION>>(request);
            ViewData["OrganizationList"] = OrganizationList;
            #endregion  Organization

            #region Division
            request = new RestRequest();
            request.Resource = "/Divisions/";
            request.RootElement = "ArrayOfDIVISION";
            List<DIVISION> DivisionList = serviceCaller.Execute<List<DIVISION>>(request);
            ViewData["DivisionList"] = DivisionList;
            #endregion Division

            return View();
        }
        
        #region CropUse
               
        //want to do something, depends on Create for CropUse
        [HttpPost]
        public ActionResult CropUse(FormCollection fc, string Create)
        {
            try
            {
                int CropUseId = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("CropUseNew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    CropUseId = Convert.ToInt32(fc["ID"]);
                    if (CropUseId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("CropUseEdit", new { id = CropUseId });
                    }
                }
                else
                {
                    //Copy to New
                    CropUseId = Convert.ToInt32(fc["ID"]);
                    if (CropUseId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("CropUseCopy", new { id = CropUseId });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //crop use edit page
        public ActionResult CropUseEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/CropUses/{entityID}";
            request.RootElement = "CROP_USE";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            CROP_USE thisCropUse = serviceCaller.Execute<CROP_USE>(request);
            
            return View("CropUse/CropUseEdit", thisCropUse);
        
        
        }

        //Post the edit to update the CropUse (actually a GET .. no edits allowed
        [HttpPost]
        public ActionResult CropUse_Edit(int id, CROP_USE editedCropUse)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/CropUses/{entityID}/Edit?ActiveDate={date}";
            request.RootElement = "CROP_USE";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);

            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<CROP_USE>(editedCropUse), ParameterType.RequestBody);
            CROP_USE updatedCropUse = serviceCaller.Execute<CROP_USE>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //crop use copy to new page
        public ActionResult CropUseCopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/CropUses/{entityID}";
            request.RootElement = "CROP_USE";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            CROP_USE thisCropUse = serviceCaller.Execute<CROP_USE>(request);

            return View("CropUse/CropUseCopy", thisCropUse);
        }

        //crop use post to new
        [HttpPost]
        public ActionResult CropUse_Copy(CROP_USE newCropUse)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/CropUses";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<CROP_USE>(newCropUse), ParameterType.RequestBody);

                CROP_USE createdCU = serviceCaller.Execute<CROP_USE>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/CropUses/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "CROP_USE";
                request.AddParameter("entityID", createdCU.ID, ParameterType.UrlSegment);
                CROP_USE activatedCU = serviceCaller.Execute<CROP_USE>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }
        
        //crop use new page
        public ActionResult CropUseNew()
        {
            return View("CropUse/CropUseNew");
        }

        //post the new CropUse
        [HttpPost]
        public ActionResult CropUse_New(CROP_USE newCropUse)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/CropUses";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<CROP_USE>(newCropUse), ParameterType.RequestBody);

                CROP_USE createdCU = serviceCaller.Execute<CROP_USE>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/CropUses/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "CROP_USE";
                request.AddParameter("entityID", createdCU.ID, ParameterType.UrlSegment);
                CROP_USE activatedCU = serviceCaller.Execute<CROP_USE>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }
               
        #endregion CropUse

        #region Product

        //want to do something, depends on Create for Product
        [HttpPost]
        public ActionResult Product(FormCollection fc, string Create)
        {
            try
            {
                int ProductId = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("ProductNew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    ProductId = Convert.ToInt32(fc["ID"]);
                    if (ProductId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("ProductEdit", new { id = ProductId });
                    }
                }
                else
                {
                    //Copy to New
                    ProductId = Convert.ToInt32(fc["ID"]);
                    if (ProductId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("ProductCopy", new { id = ProductId });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //product edit page
        public ActionResult ProductEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Products/{entityID}";
            request.RootElement = "PRODUCT";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            PRODUCT thisProduct = serviceCaller.Execute<PRODUCT>(request);

            return View("Product/ProductEdit", thisProduct);
        }

        //Post the edit to update the Product
        [HttpPost]
        public ActionResult Product_Edit(int id, PRODUCT editedProduct)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/Products/{entityID}/Edit?ActiveDate={date}";
            request.RootElement = "PRODUCT";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);

            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<PRODUCT>(editedProduct), ParameterType.RequestBody);
            PRODUCT updatedProduct = serviceCaller.Execute<PRODUCT>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //copy to new page
        public ActionResult ProductCopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Products/{entityID}";
            request.RootElement = "PRODUCT";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            PRODUCT thisProduct = serviceCaller.Execute<PRODUCT>(request);

            return View("Product/ProductCopy", thisProduct);
        }
        
        //post the new product
        [HttpPost]
        public ActionResult Product_Copy(PRODUCT newProduct)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Products";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<PRODUCT>(newProduct), ParameterType.RequestBody);

                PRODUCT createdProd = serviceCaller.Execute<PRODUCT>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/Products/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "PRODUCT";
                request.AddParameter("entityID", createdProd.ID, ParameterType.UrlSegment);
                PRODUCT activatedProd = serviceCaller.Execute<PRODUCT>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }
        
        //crop use new page
        public ActionResult ProductNew()
        {
            return View("Product/ProductNew");
        }

        //post the new Product
        [HttpPost]
        public ActionResult Product_New(PRODUCT newProduct)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Products";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<PRODUCT>(newProduct), ParameterType.RequestBody);

                PRODUCT createdProd = serviceCaller.Execute<PRODUCT>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/Products/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "PRODUCT";
                request.AddParameter("entityID", createdProd.ID, ParameterType.UrlSegment);
                PRODUCT activatedProd = serviceCaller.Execute<PRODUCT>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        #endregion Product

        #region Limitations Codes

        //want to do something, depends on which button they clicked (Create) for Code
        [HttpPost]
        public ActionResult Codes(FormCollection fc, string Create)
        {
            try
            {
                int LimiationId = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("CodesNew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    LimiationId = Convert.ToInt32(fc["ID"]);
                    if (LimiationId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("CodesEdit", new { id = LimiationId });
                    }
                }
                else
                {
                    //Copy to New
                    LimiationId = Convert.ToInt32(fc["ID"]);
                    if (LimiationId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("CodesCopy", new { id = LimiationId });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //get the edit page for codes
        public ActionResult CodesEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Limitations/{entityID}";
            request.RootElement = "LIMITATIONS";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            LIMITATION thisLimitation = serviceCaller.Execute<LIMITATION>(request);
            
            return View("Codes/CodesEdit",thisLimitation);
        }

        //Post the edit to update the Code
        [HttpPost]
        public ActionResult Codes_Edit(int id, LIMITATION editedCode)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/Limitations/{entityID}/Edit?ActiveDate={date}";
            request.RootElement = "LIMITATIONS";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<LIMITATION>(editedCode), ParameterType.RequestBody);
            LIMITATION updatedCode = serviceCaller.Execute<LIMITATION>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //copy to new page
        public ActionResult CodesCopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Limitations/{entityID}";
            request.RootElement = "LIMITATIONS";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            LIMITATION thisLimitation = serviceCaller.Execute<LIMITATION>(request);

            return View("Codes/CodesCopy", thisLimitation);
        }

        //post the new code
        [HttpPost]
        public ActionResult Codes_Copy(LIMITATION newLimitation)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Limitations";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<LIMITATION>(newLimitation), ParameterType.RequestBody);

                LIMITATION createdLimitation = serviceCaller.Execute<LIMITATION>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/Limitations/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "LIMITATION";
                request.AddParameter("entityID", createdLimitation.ID, ParameterType.UrlSegment);
                LIMITATION activatedLimitation = serviceCaller.Execute<LIMITATION>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //get the codes new page
        public ActionResult CodesNew()
        {
            return View("Codes/CodesNew");
        }

        //post the new Code
        [HttpPost]
        public ActionResult Codes_New(LIMITATION newLimitation)
        {
           try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Limitations";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<LIMITATION>(newLimitation), ParameterType.RequestBody);

                LIMITATION createdLimitation = serviceCaller.Execute<LIMITATION>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/Limitations/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "LIMITATION";
                request.AddParameter("entityID", createdLimitation.ID, ParameterType.UrlSegment);
                LIMITATION activatedLimitation = serviceCaller.Execute<LIMITATION>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        #endregion Limitations Codes
        
        #region Modifiers

        //want to do something, depends on Create for Modifiers
        [HttpPost]
        public ActionResult Modifiers(FormCollection fc, string Create)
        {
            try
            {
                int ModifierId = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("ModifiersNew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    ModifierId = Convert.ToInt32(fc["ID"]);
                    if (ModifierId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("ModifiersEdit", new { id = ModifierId });
                    }
                }
                else
                {
                    //Copy to New
                    ModifierId = Convert.ToInt32(fc["ID"]);
                    if (ModifierId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("ModifiersCopy", new { id = ModifierId });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //edit page
        public ActionResult ModifiersEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Modifiers/{entityID}";
            request.RootElement = "MODIFIER";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            MODIFIER thisModifier = serviceCaller.Execute<MODIFIER>(request);

            return View("Modifiers/ModifiersEdit", thisModifier);
        }

        //Post the edit to update the Modifiers
        [HttpPost]
        public ActionResult Modifiers_Edit(int id, MODIFIER editedModifier)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/Modifiers/{entityID}/Edit?ActiveDate={date}";
            request.RootElement = "MODIFIER";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<MODIFIER>(editedModifier), ParameterType.RequestBody);
            MODIFIER updatedModifier = serviceCaller.Execute<MODIFIER>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //copy to new page
        public ActionResult ModifiersCopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Modifiers/{entityID}";
            request.RootElement = "MODIFIER";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            MODIFIER thisModifier = serviceCaller.Execute<MODIFIER>(request);

            return View("Modifiers/ModifiersCopy", thisModifier);
        }
        
        //post new modifier
        [HttpPost]
        public ActionResult Modifiers_Copy(MODIFIER newModifier)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Modifiers";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<MODIFIER>(newModifier), ParameterType.RequestBody);

                MODIFIER createdModifier = serviceCaller.Execute<MODIFIER>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/Modifiers/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "MODIFIER";
                request.AddParameter("entityID", createdModifier.ID, ParameterType.UrlSegment);
                MODIFIER activatedMod = serviceCaller.Execute<MODIFIER>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //create new page
        public ActionResult ModifiersNew()
        {
            return View("Modifiers/ModifiersNew");
        }

        //post the new AI
        [HttpPost]
        public ActionResult Modifiers_New(MODIFIER newModifier)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Modifiers";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<MODIFIER>(newModifier), ParameterType.RequestBody);

                MODIFIER createdModifier = serviceCaller.Execute<MODIFIER>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/Modifiers/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "MODIFIER";
                request.AddParameter("entityID", createdModifier.ID, ParameterType.UrlSegment);
                MODIFIER activatedMod = serviceCaller.Execute<MODIFIER>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }
      
        #endregion Modifiers

        #region AI
        
        //want to do something, depends on Create for AI
        [HttpPost]
        public ActionResult AI(FormCollection fc, string Create)
        {
            try
            {
                int AI_Id = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("AINew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    AI_Id = Convert.ToInt32(fc["ID"]);
                    if (AI_Id == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("AIEdit", new { id = AI_Id });
                    }
                }
                else
                {
                    //Copy to New
                    AI_Id = Convert.ToInt32(fc["ID"]);
                    if (AI_Id == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("AICopy", new { id = AI_Id });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //edit page
        public ActionResult AIEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/ActiveIngredients/{entityID}";
            request.RootElement = "ACTIVE_INGREDIENT";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            ACTIVE_INGREDIENT thisAI = serviceCaller.Execute<ACTIVE_INGREDIENT>(request);

            request = new RestRequest();
            request.Resource = "/AIClasses?ActiveDate={date}";
            request.RootElement = "ArrayOfAI_CLASS";
            List<AI_CLASS> AIClassList = serviceCaller.Execute<List<AI_CLASS>>(request);
            ViewData["AIClassList"] = AIClassList;

            return View("AI/AIEdit", thisAI);
        }
        
        //Post the edit to update the AI
        [HttpPost]
        public ActionResult AI_Edit(int id, ACTIVE_INGREDIENT editedAI)
        {
            
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/ActiveIngredients/{entityID}/Edit?ActiveDate={date}";
            request.RootElement = "ACTIVE_INGREDIENT";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<ACTIVE_INGREDIENT>(editedAI), ParameterType.RequestBody);
            ACTIVE_INGREDIENT updatedAI = serviceCaller.Execute<ACTIVE_INGREDIENT>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //copy to new page
        public ActionResult AICopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/ActiveIngredients/{entityID}";
            request.RootElement = "ACTIVE_INGREDIENT";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            ACTIVE_INGREDIENT thisAI = serviceCaller.Execute<ACTIVE_INGREDIENT>(request);

            request = new RestRequest();
            request.Resource = "/AIClasses?ActiveDate={date}";
            request.RootElement = "ArrayOfAI_CLASS";
            List<AI_CLASS> AIClassList = serviceCaller.Execute<List<AI_CLASS>>(request);
            ViewData["AIClassList"] = AIClassList;

            return View("AI/AICopy", thisAI);
        }
        
        //post new ai
        [HttpPost]
        public ActionResult AI_Copy(ACTIVE_INGREDIENT newAI)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/ActiveIngredients";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<ACTIVE_INGREDIENT>(newAI), ParameterType.RequestBody);

                ACTIVE_INGREDIENT createdAI = serviceCaller.Execute<ACTIVE_INGREDIENT>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/ActiveIngredients/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "ACTIVE_INGREDIENT";
                request.AddParameter("entityID", createdAI.ID, ParameterType.UrlSegment);
                ACTIVE_INGREDIENT activatedAI = serviceCaller.Execute<ACTIVE_INGREDIENT>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }
 
        //new page
        public ActionResult AINew()
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/AIClasses?ActiveDate={date}";
            request.RootElement = "ArrayOfAI_CLASS";
            List<AI_CLASS> AIClassList = serviceCaller.Execute<List<AI_CLASS>>(request);
            ViewData["AIClassList"] = AIClassList;
            return View("AI/AINew");
        }

        //post the new AI
        [HttpPost]
        public ActionResult AI_New(ACTIVE_INGREDIENT newAI)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/ActiveIngredients";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<ACTIVE_INGREDIENT>(newAI), ParameterType.RequestBody);

                ACTIVE_INGREDIENT createdAI = serviceCaller.Execute<ACTIVE_INGREDIENT>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/ActiveIngredients/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "ACTIVE_INGREDIENT";
                request.AddParameter("entityID", createdAI.ID, ParameterType.UrlSegment);
                ACTIVE_INGREDIENT activatedAI = serviceCaller.Execute<ACTIVE_INGREDIENT>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        #endregion AI

        #region AI_Class

        //want to do something, depends on Create for AI
        [HttpPost]
        public ActionResult AI_Class(FormCollection fc, string Create)
        {
            try
            {
                int AIClass_Id = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("AI_ClassNew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    AIClass_Id = Convert.ToInt32(fc["ID"]);
                    if (AIClass_Id == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("AI_ClassEdit", new { id = AIClass_Id });
                    }
                }
                else
                {
                    //Copy to New
                    AIClass_Id = Convert.ToInt32(fc["ID"]);
                    if (AIClass_Id == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("AI_ClassCopy", new { id = AIClass_Id });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //edit page
        public ActionResult AI_ClassEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/AIClasses/{entityID}";
            request.RootElement = "AI_CLASS";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            AI_CLASS thisAIClass = serviceCaller.Execute<AI_CLASS>(request);

            return View("AI_Class/AI_ClassEdit", thisAIClass);
        }

        //Post the edit to update the AI
        [HttpPost]
        public ActionResult AI_Class_Edit(int id, AI_CLASS editedAIClass)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/AIClasses/{entityID}/Edit?ActiveDate={date}";
            request.RootElement = "AI_CLASS";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<AI_CLASS>(editedAIClass), ParameterType.RequestBody);
            AI_CLASS updatedAIClass = serviceCaller.Execute<AI_CLASS>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //copy to new page
        public ActionResult AI_ClassCopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/AIClasses/{entityID}";
            request.RootElement = "AI_CLASS";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            AI_CLASS thisAIClass = serviceCaller.Execute<AI_CLASS>(request);

            return View("AI_Class/AI_ClassCopy", thisAIClass);
        }

        //post new aiclass
        [HttpPost]
        public ActionResult AI_Class_Copy(AI_CLASS newAIClass)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);
                request.Resource = "/AIClasses";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<AI_CLASS>(newAIClass), ParameterType.RequestBody);

                AI_CLASS createdAIclass = serviceCaller.Execute<AI_CLASS>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/AIClasses/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "AI_CLASS";
                request.AddParameter("entityID", createdAIclass.ID, ParameterType.UrlSegment);
                AI_CLASS activatedaiClass = serviceCaller.Execute<AI_CLASS>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //new page
        public ActionResult AI_ClassNew()
        {
            return View("AI_Class/AI_ClassNew");
        }

        //post the new AI
        [HttpPost]
        public ActionResult AI_Class_New(AI_CLASS newAIClass)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);
                request.Resource = "/AIClasses";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<AI_CLASS>(newAIClass), ParameterType.RequestBody);

                AI_CLASS createdAIclass = serviceCaller.Execute<AI_CLASS>(request);

                //now activate it for use
                request = new RestRequest();
                request.Resource = "/AIClasses/{entityID}/Activate?ActiveDate={date}";
                request.RootElement = "AI_CLASS";
                request.AddParameter("entityID", createdAIclass.ID, ParameterType.UrlSegment);
                AI_CLASS activatedaiClass = serviceCaller.Execute<AI_CLASS>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        #endregion AI_Class       
        
        #region Species

        //want to do something, depends on Create for Species
        [HttpPost]
        public ActionResult Species(FormCollection fc, string Create)
        {
            try
            {
                int species_Id = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("SpeciesNew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    species_Id = Convert.ToInt32(fc["ID"]);
                    if (species_Id == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("SpeciesEdit", new { id = species_Id });
                    }
                }
                else
                {
                    //Copy to New
                    species_Id = Convert.ToInt32(fc["ID"]);
                    if (species_Id == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("SpeciesCopy", new { id = species_Id });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //edit page
        public ActionResult SpeciesEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Species/{entityID}";
            request.RootElement = "SPECIES";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            SPECIES thisSpecies = serviceCaller.Execute<SPECIES>(request);

            //get family and taxa
            request = new RestRequest();
            request.Resource = "/SpeciesFamilies/";
            request.RootElement = "SPECIES_FAMILY";
            ViewData["FamilyList"] = serviceCaller.Execute<List<SPECIES_FAMILY>>(request);

            request = new RestRequest();
            request.Resource = "/SpeciesTaxas/";
            request.RootElement = "SPECIES_TAXA";
            ViewData["TaxaList"] = serviceCaller.Execute<List<SPECIES_TAXA>>(request);

            request = new RestRequest();
            request.Resource = "/SpeciesGroups/";
            request.RootElement = "SPECIES_GROUP";
            ViewData["GroupList"] = serviceCaller.Execute<List<SPECIES_GROUP>>(request);

            return View("Species/SpeciesEdit", thisSpecies);
        }
        
        //Post the edit to update the Species
        [HttpPost]
        public ActionResult Species_Edit(int id, SPECIES editedSpecies)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/Species/{speciesID}";
            request.RequestFormat = DataFormat.Xml;
            request.AddParameter("speciesID", id, ParameterType.UrlSegment);
            request.AddHeader("X-HTTP-Method-Override", "PUT");
            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<SPECIES>(editedSpecies), ParameterType.RequestBody);
            SPECIES updatedSpecies = serviceCaller.Execute<SPECIES>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //copy to new page
        public ActionResult SpeciesCopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Species/{entityID}";
            request.RootElement = "SPECIES";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            SPECIES thisSpecies = serviceCaller.Execute<SPECIES>(request);

            //get family and taxa
            request = new RestRequest();
            request.Resource = "/SpeciesFamilies/";
            request.RootElement = "SPECIES_FAMILY";
            ViewData["FamilyList"] = serviceCaller.Execute<List<SPECIES_FAMILY>>(request);

            request = new RestRequest();
            request.Resource = "/SpeciesTaxas/";
            request.RootElement = "SPECIES_TAXA";
            ViewData["TaxaList"] = serviceCaller.Execute<List<SPECIES_TAXA>>(request);

            request = new RestRequest();
            request.Resource = "/SpeciesGroups/";
            request.RootElement = "SPECIES_GROUP";
            ViewData["GroupList"] = serviceCaller.Execute<List<SPECIES_GROUP>>(request);

            return View("Species/SpeciesCopy", thisSpecies);
        }
        
        //post new species
        [HttpPost]
        public ActionResult Species_Copy(SPECIES newSpecies)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);
                request.Resource = "/Species";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<SPECIES>(newSpecies), ParameterType.RequestBody);

                SPECIES createdSpecies = serviceCaller.Execute<SPECIES>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //new page
        public ActionResult SpeciesNew()
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;

            //get family and taxa
            var request = new RestRequest();
            request.Resource = "/SpeciesFamilies/";
            request.RootElement = "SPECIES_FAMILY";
            ViewData["FamilyList"] = serviceCaller.Execute<List<SPECIES_FAMILY>>(request);

            request = new RestRequest();
            request.Resource = "/SpeciesTaxas/";
            request.RootElement = "SPECIES_TAXA";
            ViewData["TaxaList"] = serviceCaller.Execute<List<SPECIES_TAXA>>(request);

            request = new RestRequest();
            request.Resource = "/SpeciesGroups/";
            request.RootElement = "SPECIES_GROUP";
            ViewData["GroupList"] = serviceCaller.Execute<List<SPECIES_GROUP>>(request);

            return View("Species/SpeciesNew");
        }
        
        //post the new Species
        [HttpPost]
        public ActionResult Species_New(SPECIES newSpecies)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);
                request.Resource = "/Species";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<SPECIES>(newSpecies), ParameterType.RequestBody);

                SPECIES createdSpecies = serviceCaller.Execute<SPECIES>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        #endregion Species

        #region Organization

        //want to do something, depends on Create for organization
        [HttpPost]
        public ActionResult Organizations(FormCollection fc, string Create)
        {
            try
            {
                int OrgId = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("OrganizationNew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    OrgId = Convert.ToInt32(fc["ORGANIZATION_ID"]);
                    if (OrgId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("OrganizationEdit", new { id = OrgId });
                    }
                }
                else
                {
                    //Copy to New
                    OrgId = Convert.ToInt32(fc["ORGANIZATION_ID"]);
                    if (OrgId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("OrganizationCopy", new { id = OrgId });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //organization edit page
        public ActionResult OrganizationEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Organizations/{entityID}";
            request.RootElement = "ORGANIZATION";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            ORGANIZATION thisOrg = serviceCaller.Execute<ORGANIZATION>(request);

            return View("Organizations/OrganizationEdit", thisOrg);
        }

        //Post the edit to update the Organization (actually a GET .. no edits allowed
        [HttpPost]
        public ActionResult Organization_Edit(int id, ORGANIZATION editedOrg)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/Organizations/{organizationID}";
            request.RequestFormat = DataFormat.Xml;
            request.AddParameter("organizationID", id, ParameterType.UrlSegment);
            request.AddHeader("X-HTTP-Method-Override", "PUT");
            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<ORGANIZATION>(editedOrg), ParameterType.RequestBody);
            ORGANIZATION updatedOrg = serviceCaller.Execute<ORGANIZATION>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //copy to new page
        public ActionResult OrganizationCopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Organizations/{entityID}";
            request.RootElement = "ORGANIZATION";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            ORGANIZATION thisOrg = serviceCaller.Execute<ORGANIZATION>(request);

            return View("Organizations/OrganizationCopy", thisOrg);
        }

        //post new organization
        [HttpPost]
        public ActionResult Organization_Copy(ORGANIZATION newOrg)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Organizations";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<ORGANIZATION>(newOrg), ParameterType.RequestBody);

                ORGANIZATION createdOrg = serviceCaller.Execute<ORGANIZATION>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //Organization new page
        public ActionResult OrganizationNew()
        {
            return View("Organizations/OrganizationNew");
        }

        //post the new Organization
        [HttpPost]
        public ActionResult Organization_New(ORGANIZATION newOrg)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Organizations";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<ORGANIZATION>(newOrg), ParameterType.RequestBody);

                ORGANIZATION createdOrg = serviceCaller.Execute<ORGANIZATION>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        #endregion Organization

        #region Division

        //want to do something, depends on Create for division
        [HttpPost]
        public ActionResult Divisions(FormCollection fc, string Create)
        {
            try
            {
                int DivId = 0;
                if (Create == "Add New")
                {
                    return RedirectToAction("DivisionNew");
                }
                else if (Create == "Edit")
                {
                    //edit
                    DivId = Convert.ToInt32(fc["DIVISION_ID"]);
                    if (DivId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to edit page                        
                        return RedirectToAction("DivisionEdit", new { id = DivId });
                    }
                }
                else
                {
                    //Copy to New
                    DivId = Convert.ToInt32(fc["DIVISION_ID"]);
                    if (DivId == 0)
                    {
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        //send them to copy to new page
                        return RedirectToAction("DivisionCopy", new { id = DivId });
                    }
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //Division edit page
        public ActionResult DivisionEdit(int id)
        {
            //get the logged in user's role
            ViewData["Role"] = GetLoggedInMember();

            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Divisions/{entityID}";
            request.RootElement = "DIVISION";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            DIVISION thisDiv = serviceCaller.Execute<DIVISION>(request);

            return View("Divisions/DivisionEdit", thisDiv);
        }

        //Post the edit to update the Division (actually a GET .. no edits allowed
        [HttpPost]
        public ActionResult Division_Edit(int id, DIVISION editedDiv)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest(Method.POST);
            request.Resource = "/Divisions/{divisionID}";
            request.RequestFormat = DataFormat.Xml;
            request.AddParameter("divisionID", id, ParameterType.UrlSegment);
            request.AddHeader("X-HTTP-Method-Override", "PUT");

            //Use extended serializer
            BLTWebSerializer serializer = new BLTWebSerializer();
            request.AddParameter("application/xml", serializer.Serialize<DIVISION>(editedDiv), ParameterType.RequestBody);
            DIVISION updatedDiv = serviceCaller.Execute<DIVISION>(request);

            //update the AI and go back to the AI index
            return RedirectToAction("Index");
        }

        //copy to new page
        public ActionResult DivisionCopy(int id)
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/Divisions/{entityID}";
            request.RootElement = "DIVISION";
            request.AddParameter("entityID", id, ParameterType.UrlSegment);
            DIVISION thisDiv = serviceCaller.Execute<DIVISION>(request);

            return View("Divisions/DivisionCopy", thisDiv);
        }

        //post new division
        [HttpPost]
        public ActionResult Division_Copy(DIVISION newDiv)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Divisions";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<DIVISION>(newDiv), ParameterType.RequestBody);

                DIVISION createdDiv = serviceCaller.Execute<DIVISION>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        //Division new page
        public ActionResult DivisionNew()
        {
            return View("Divisions/DivisionNew");
        }

        //post the new Division
        [HttpPost]
        public ActionResult Division_New(DIVISION newDiv)
        {
            try
            {
                BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
                var request = new RestRequest(Method.POST);

                request.Resource = "/Divisions";
                request.RequestFormat = DataFormat.Xml;
                request.AddHeader("Content-Type", "application/xml");
                //Use extended serializer
                BLTWebSerializer serializer = new BLTWebSerializer();
                request.AddParameter("application/xml", serializer.Serialize<DIVISION>(newDiv), ParameterType.RequestBody);

                DIVISION createdDiv = serviceCaller.Execute<DIVISION>(request);

                return RedirectToAction("../Parts/Index");
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }

        #endregion Division

        //call for who the member logged in is 
        public string GetLoggedInMember()
        {
            BLTServiceCaller serviceCaller = BLTServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "Users?username={userName}";
            request.RootElement = "USER_";
            request.AddParameter("userName", User.Identity.Name, ParameterType.UrlSegment);
            USER_ loggedInUser = serviceCaller.Execute<USER_>(request);
            int loggedInMember = Convert.ToInt32(loggedInUser.ROLE_ID);
            string Role = string.Empty;
            switch (loggedInMember)
            {
                case 1: Role = "Admin"; break;
                case 2: Role = "Publish"; break;
                case 3: Role = "Create"; break;
                case 4: Role = "Enforce"; break;
                case 5: Role = "Public"; break;
                default: Role = "error"; break;
            }

            return Role;
        }
    
    }
}