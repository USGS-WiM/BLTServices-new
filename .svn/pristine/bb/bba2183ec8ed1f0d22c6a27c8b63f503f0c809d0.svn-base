//------------------------------------------------------------------------------
//----- ProductHandler ---------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2013 WiM - USGS

//    authors:  Tonia Roddick USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles Site resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//              https://github.com/openrasta/openrasta/wiki/Handlers
//
//     

#region Comments
// 05.29.13 - TR - Created
#endregion

using BLTServices.Authentication;

using OpenRasta.Web;
using OpenRasta.Security;

using System;
using System.Data;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects;
using System.Collections.Generic;
using System.Collections;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Web.Mvc;
using System.Runtime.InteropServices;

namespace BLTServices.Handlers
{
    public class ProductHandler:HandlerBase
    {
        #region Properties
        public override string entityName
        {
            get { return "PRODUCT"; }
        }
        #endregion
        #region Routed Methods
        #region GetMethods
        //---------------------Returns List of objects---------------------
        // returns all PRODUCT
       // [WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<PRODUCT> productList;
            try
            {
                //using (EasySecureString securedPassword = GetSecuredPassword())
                //{
                  //  using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                      using (BLTRDSEntities aBLTE = GetRDS())
                      {
                          List<PRODUCT> prodS = GetEntities<PRODUCT>(aBLTE).ToList();
                          productList = prodS.OrderBy(p => p.PRODUCT_NAME).ToList();

                    }//end using
//                }//end using

                activateLinks<PRODUCT>(productList);

                return new OperationResult.OK { ResponseResource = productList };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }
        }//end HttpMethod.GET

        ////////////////////////////////////////
        //[HttpOperation(HttpMethod.GET)]
        //public JsonResult  Get()
        //{
        //    List<PRODUCT> productList;
        //    try
        //    {
        //        using (BLTRDSEntities aBLTE = GetRDS())
        //        {
        //            productList = GetEntities<PRODUCT>(aBLTE).ToList();
                    
        //        }//end using

        //        activateLinks<PRODUCT>(productList);
                
        //        return  (productList);
        //        //return new OperationResult.OK { ResponseResource = productList };
        //    }
        //    catch (Exception ex)
        //    {
        //        return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
        //    }
        //}//end HttpMethod.GET
        ///////////////////////////////////////
        // returns all active PRODUCT
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(string date)
        {
            List<PRODUCT> aProductList = null;
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now; 

                //set the date to current date if request is not authorized
                if (DateTime.Compare(thisDate.Value, DateTime.Now) < 0 && !CanManage()) thisDate = DateTime.Now;
                
                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        aProductList = GetActive(GetEntities<PRODUCT>(aBLTE), thisDate.Value).ToList();
                    }//end using
                }//end using

                activateLinks<PRODUCT>(aProductList);

                return new OperationResult.OK { ResponseResource = aProductList };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }

        }//end HttpMethod.GET

        //[WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 productID, [Optional] string date)
        {
            try
            {
                List<PRODUCT> productList;
                DateTime? thisDate = ValidDate(date);

                if (productID < 0)
                { return new OperationResult.BadRequest(); }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        IQueryable<PRODUCT> query;
                        query = GetEntities<PRODUCT>(aBLTE).Where(ai => ai.PRODUCT_ID == productID);

                        if (thisDate.HasValue)
                            query = GetActive(query, thisDate.Value);

                        //process
                        productList = query.ToList();
                    }//end using
                }//end using

                activateLinks<PRODUCT>(productList);

                return new OperationResult.OK { ResponseResource = productList };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }
        }//end HttpMethod.GET

        // returns active Active Ingredients for the given pulaID
        [HttpOperation(HttpMethod.GET, ForUriName = "GetAIProduct")]
        public OperationResult GetAIProduct(Int32 activeIngredientID, [Optional]string date)
        {
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                //set the date to current date if request is not authorized
                if (DateTime.Compare(thisDate.Value, DateTime.Now) < 0 && !CanManage()) thisDate = DateTime.Now;

                List<PRODUCT> productList;
                using (BLTRDSEntities aBLTE = GetRDS())
                {
                    // all of the products that contain a certain active ingredient
                    IQueryable<PRODUCT> query1 =
                            (from ProductAI in GetActive(aBLTE.PRODUCT_ACTIVE_INGREDIENT.Where(p => p.ACTIVE_INGREDIENT_ID == activeIngredientID), thisDate.Value)
                             join cu in aBLTE.PRODUCT
                             on ProductAI.PRODUCT_ID equals cu.ID
                             select cu).Distinct();

                    //IQueryable<List<PRODUCT_ACTIVE_INGREDIENT>> query1 = from p in aBLTE.PRODUCT_ACTIVE_INGREDIENT.Where(p => p.ACTIVE_INGREDIENT_ID == activeIngredientID) select p;
                    
                    //IQueryable<PRODUCT> query1 =
                    //        (from ProductAI in GetEntities<PRODUCT_ACTIVE_INGREDIENT>(aBLTE).Where(p => p.ACTIVE_INGREDIENT_ID == activeIngredientID)
                    //         join cu in aBLTE.PRODUCT
                    //         on ProductAI.PRODUCT_ID equals cu.ID
                    //         select cu).Distinct();
     
                    productList = GetActive(query1, thisDate.Value).ToList();


                    activateLinks<PRODUCT>(productList);

                }//end using

                return new OperationResult.OK { ResponseResource = productList };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }
        }//end HttpMethod.GET

        //---------------------Returns individual objects---------------------
        [WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.GET, ForUriName="GetEntity")]
        public OperationResult GetEntity(Int32 entityID)
        {
            PRODUCT aProduct;
            try
            {
                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        aProduct = GetEntities<PRODUCT>(aBLTE).SingleOrDefault(c => c.ID == entityID);

                    }//end using
                }//end using

                activateLinks<PRODUCT>(aProduct);

                return new OperationResult.OK { ResponseResource = aProduct };
            }
            catch (Exception ex)
            {
                return new OperationResult.InternalServerError { ResponseResource = ex.InnerException.ToString() };
            }
        }//end HttpMethod.GET
        #endregion
        #region POST Methods

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult POST(PRODUCT anEntity)
        {
            try
            {
                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        if (!Exists(aBLTE, ref anEntity))
                        {
                            //create version
                            anEntity.VERSION_ID = SetVersion(aBLTE, anEntity.VERSION_ID, LoggedInUser(aBLTE).USER_ID, StatusType.Created, DateTime.Now).VERSION_ID;
                           
                            anEntity.PRODUCT_ID = GetNextID(aBLTE);

                            aBLTE.PRODUCT.AddObject(anEntity);

                            aBLTE.SaveChanges();
                        }//end if

                        activateLinks<PRODUCT>(anEntity); 
                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = anEntity };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole, CreaterRole })]
        [HttpOperation(HttpMethod.POST, ForUriName = "AddProducttoAI")]
        public OperationResult AddProducttoAI(Int32 entityID, ACTIVE_INGREDIENT AI)
        {
            try
            {
                PRODUCT aProduct = new PRODUCT();
                PRODUCT_ACTIVE_INGREDIENT newPAI = new PRODUCT_ACTIVE_INGREDIENT();

                //Return BadRequest if missing required fields
                if (entityID <= 0 || AI.ACTIVE_INGREDIENT_ID <= 0)
                { return new OperationResult.BadRequest(); }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        aProduct = GetEntities<PRODUCT>(aBLTE).SingleOrDefault(c => c.ID == entityID);
                                               
                        newPAI.PRODUCT_ID = aProduct.ID;
                        newPAI.ACTIVE_INGREDIENT_ID = AI.ID;

                        //check if this relationship already exists
                        if (!Exists1(aBLTE, ref newPAI))
                        {
                            //create version
                            newPAI.VERSION_ID = SetVersion(aBLTE, newPAI.VERSION_ID, LoggedInUser(aBLTE).USER_ID, StatusType.Created, DateTime.Now).VERSION_ID;
                            
                            //assign version
                            newPAI.VERSION_ID = SetVersion(aBLTE, newPAI.VERSION_ID, LoggedInUser(aBLTE).USER_ID, StatusType.Activated, DateTime.Now).VERSION_ID;

                            newPAI.PRODUCT_ACTIVE_INGREDIENT_ID = GetNextPAI_ID(aBLTE);

                            aBLTE.PRODUCT_ACTIVE_INGREDIENT.AddObject(newPAI);
                            aBLTE.SaveChanges();                        
                            activateLinks<PRODUCT_ACTIVE_INGREDIENT>(newPAI);
                        }
                        
                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = newPAI };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }


        }//end HttpMethod.GET

        #endregion
        #region Activate Methods

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.GET, ForUriName = "Activate")]
        public OperationResult Activate(Int32 entityID, [Optional] string date)
        {
            //No editing of tables are allowed. An edit call will create and activate a new entity, and expire the old one
            USER_ loggedInUser;
            PRODUCT aProduct;
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                if (entityID <= 0)
                { return new OperationResult.BadRequest(); }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        //version user
                        loggedInUser = LoggedInUser(aBLTE);

                        aProduct = aBLTE.PRODUCT.FirstOrDefault(c => c.ID == entityID);

                        if (aProduct == null)
                        { return new OperationResult.BadRequest(); }

                        //assign version
                        aProduct.VERSION_ID = SetVersion(aBLTE, aProduct.VERSION_ID, loggedInUser.USER_ID, StatusType.Activated, thisDate.Value).VERSION_ID;

                        ExpireOtherEntities(aBLTE, loggedInUser.USER_ID, aProduct, thisDate.Value);

                        aBLTE.SaveChanges();

                        activateLinks<PRODUCT>(aProduct);
                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = aProduct };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        #endregion
        #region EDIT Methods

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.POST, ForUriName = "Edit")]
        public OperationResult Edit(Int32 entityID, PRODUCT anEntity, [Optional] string date)
        {
            //No editing of tables are allowed. An edit call will create and activate a new entity, and expire the old one
            USER_ loggedInUser;
            PRODUCT aProduct;
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                if (entityID <= 0)
                { return new OperationResult.BadRequest(); }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        //version user
                        loggedInUser = LoggedInUser(aBLTE);

                        aProduct = aBLTE.PRODUCT.FirstOrDefault(c => c.ID == entityID);

                        if (aProduct == null)
                        { return new OperationResult.BadRequest(); }

                        //assign version
                        anEntity.VERSION_ID = SetVersion(aBLTE, anEntity.VERSION_ID, loggedInUser.USER_ID, StatusType.Created, DateTime.Now).VERSION_ID;
                        anEntity.VERSION_ID = SetVersion(aBLTE, anEntity.VERSION_ID, loggedInUser.USER_ID, StatusType.Activated, thisDate.Value).VERSION_ID;
                        ExpireEntities(aBLTE, loggedInUser.USER_ID, anEntity.PRODUCT_ID, thisDate.Value);

                        aBLTE.PRODUCT.AddObject(anEntity);
                        aBLTE.SaveChanges();

                        activateLinks<PRODUCT>(anEntity);
                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = anEntity };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.POST, ForUriName = "EditPAI")]
        public OperationResult EditProductAI(Int32 entityID, ACTIVE_INGREDIENT thisAI)
        {
            //No deleting of tables are allowed. An delete call will expire the entity
            USER_ loggedInUser;
            PRODUCT_ACTIVE_INGREDIENT aPAI;

            try
            {
                DateTime? thisDate = DateTime.Now;

                if (entityID <= 0 || thisAI.ID <= 0)
                { return new OperationResult.BadRequest { }; }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        loggedInUser = LoggedInUser(aBLTE);

                        aPAI = aBLTE.PRODUCT_ACTIVE_INGREDIENT.FirstOrDefault(c => c.PRODUCT_ID == entityID && c.ACTIVE_INGREDIENT_ID == thisAI.ID);

                        if (aPAI == null)
                        {  return new OperationResult.BadRequest(); }

                        //expire the Product-AI relationship
                        ExpireProdAI(aBLTE, LoggedInUser(aBLTE).USER_ID, aPAI.PRODUCT_ACTIVE_INGREDIENT_ID, thisDate.Value);
                        aBLTE.SaveChanges();
                        
                    }//end using
                }//end using

                return new OperationResult.OK();
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET
        #endregion
        #region EXPIRE Methods

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.GET, ForUriName = "Expire")]
        public OperationResult Expire(Int32 entityID, [Optional] string date)
        {
            //No deleting of tables are allowed. An delete call will expire the entity
            PRODUCT aProduct;
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                if (entityID <= 0)
                { return new OperationResult.BadRequest { }; }

                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {

                        aProduct = aBLTE.PRODUCT.FirstOrDefault(c => c.ID == entityID);
                        if (aProduct == null)
                        { return new OperationResult.BadRequest(); }

                        //expire current 
                        aProduct.VERSION_ID = SetVersion(aBLTE, aProduct.VERSION_ID, LoggedInUser(aBLTE).USER_ID, StatusType.Expired, thisDate.Value).VERSION_ID;

                        aBLTE.SaveChanges();

                        activateLinks<PRODUCT>(aProduct);

                    }//end using
                }//end using

                return new OperationResult.OK { ResponseResource = aProduct };
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        [WiMRequiresRole(new string[] { AdminRole, PublisherRole })]
        [HttpOperation(HttpMethod.GET, ForUriName = "ExpireProduct")]
        public OperationResult ExpireProduct(Int32 productID, [Optional] string date)
        {
            //No deleting of tables are allowed. An delete call will expire the entity
            try
            {
                DateTime? thisDate = ValidDate(date);
                if (!thisDate.HasValue)
                    thisDate = DateTime.Now;

                if (productID <= 0)
                { return new OperationResult.BadRequest { }; }


                using (EasySecureString securedPassword = GetSecuredPassword())
                {
                    using (BLTRDSEntities aBLTE = GetRDS(securedPassword))
                    {
                        ExpireEntities(aBLTE, LoggedInUser(aBLTE).USER_ID, productID, thisDate.Value);

                        aBLTE.SaveChanges();

                    }//end using
                }//end using

                return new OperationResult.OK();
            }
            catch (Exception)
            { return new OperationResult.BadRequest(); }

        }//end HttpMethod.GET

        
        #endregion
        #endregion
        #region Helper Methods
        private bool Exists(BLTRDSEntities aBLTE, ref PRODUCT anEntity)
        {
            PRODUCT existingEntity;
            PRODUCT thisEntity = anEntity;
            //check if it exists
            try
            {
                existingEntity = aBLTE.PRODUCT.FirstOrDefault(mt => string.Equals(mt.PRODUCT_NAME.ToUpper(), thisEntity.PRODUCT_NAME.ToUpper()) &&
                                                                         string.Equals(mt.PRODUCT_REGISTRATION_NUMBER,thisEntity.PRODUCT_REGISTRATION_NUMBER));
        

                if (existingEntity == null)
                    return false;

                //if exists then update ref contact
                anEntity = existingEntity;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }//end Exists

        private bool Exists1(BLTRDSEntities aBLTE, ref PRODUCT_ACTIVE_INGREDIENT anEntity)
        {
            PRODUCT_ACTIVE_INGREDIENT existingEntity;
            PRODUCT_ACTIVE_INGREDIENT thisEntity = anEntity;
            //check if it exists
            try
            {
                existingEntity = aBLTE.PRODUCT_ACTIVE_INGREDIENT.FirstOrDefault(pai => pai.ACTIVE_INGREDIENT_ID == thisEntity.ACTIVE_INGREDIENT_ID && pai.PRODUCT_ID == thisEntity.PRODUCT_ID);


                if (existingEntity == null)
                    return false;

                //if exists then update ref contact
                anEntity = existingEntity;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }//end Exists

        private decimal GetNextID(BLTRDSEntities aBLTE)
        {
            //create pulaID
            Decimal nextID = 1;
            if (aBLTE.PRODUCT.Count() > 0)
                nextID = aBLTE.PRODUCT.OrderByDescending(p => p.PRODUCT_ID).First().PRODUCT_ID + 1;

            return nextID;
        }

        private decimal GetNextPAI_ID(BLTRDSEntities aBLTE)
        {
            //create pulaID
            Decimal nextID = 1;
            if (aBLTE.PRODUCT_ACTIVE_INGREDIENT.Count() > 0)
                nextID = aBLTE.PRODUCT_ACTIVE_INGREDIENT.OrderByDescending(p => p.PRODUCT_ACTIVE_INGREDIENT_ID).First().PRODUCT_ACTIVE_INGREDIENT_ID + 1;

            return nextID;
        }

        private void ExpireOtherEntities(BLTRDSEntities aBLTE, decimal userId, PRODUCT product, DateTime dt)
        {
            //get all published, should only be 1
            List<PRODUCT> aiList = aBLTE.PRODUCT.Where(p => p.PRODUCT_ID == product.PRODUCT_ID &&
                                                        p.VERSION.PUBLISHED_TIME_STAMP <= dt).ToList();
            if (aiList == null) return;

            foreach (var p in aiList)
            {
                if (!p.Equals(product))
                p.VERSION = SetVersion(aBLTE, p.VERSION_ID, userId, StatusType.Expired, dt);
            }//next
        }//end ExpireOtherEntities
        protected override void ExpireEntities(BLTRDSEntities aBLTE, decimal userId, decimal Id, DateTime dt)
        {
            //get all published, should only be 1
            List<PRODUCT> aiList = aBLTE.PRODUCT.Where(p => p.PRODUCT_ID == Id &&
                                                        p.VERSION.PUBLISHED_TIME_STAMP <= dt).ToList();
            if (aiList == null) return;

            foreach (var p in aiList)
            {
                p.VERSION = SetVersion(aBLTE, p.VERSION_ID, userId, StatusType.Expired, dt);
            }//next
        }

        private void ExpireProdAI(BLTRDSEntities aBLTE, decimal userId, decimal Id, DateTime dt)
        {
            //get all published, should only be 1
            List<PRODUCT_ACTIVE_INGREDIENT> paiList = aBLTE.PRODUCT_ACTIVE_INGREDIENT.Where(p => p.PRODUCT_ACTIVE_INGREDIENT_ID == Id &&
                                                        p.VERSION.PUBLISHED_TIME_STAMP <= dt).ToList();
            if (paiList == null) return;

            foreach (var p in paiList)
            {
                p.VERSION = SetVersion(aBLTE, p.VERSION_ID, userId, StatusType.Expired, dt);
            }//next
        }
        #endregion


    }//end class CropUseHandler
}// end namespace