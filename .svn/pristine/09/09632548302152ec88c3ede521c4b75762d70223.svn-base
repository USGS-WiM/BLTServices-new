#region Comments
// 10.10.12 - JB - Created from STN
#endregion
#region Copywright
/* Authors:
 *      Jonathan Baier (jbaier@usgs.gov)
 * Copyright:
 *      2012 USGS - WiM
 */
#endregion

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Web;

using OpenRasta.Authentication;
using OpenRasta.Authentication.Basic;

namespace BLTServices.Authentication
{
    public class BLTBasicAuthentication : IBasicAuthenticator
    {
        public string Realm
        {
            get { return "BLT-Secured-Domain-Realm"; }
        }


        public AuthenticationResult Authenticate(BasicAuthRequestHeader header)
        {
            try
            {
                using (BLTRDSEntities aLDSE = new BLTRDSEntities(
                                                            string.Format(@"metadata=res://*/BLTRDSModel.csdl|res://*/BLTRDSModel.ssdl|res://*/BLTRDSModel.msl;       provider=Oracle.DataAccess.Client;provider connection string=""DATA SOURCE=BLTRDS;USER ID={0};PASSWORD={1}""", header.Username, header.Password)))
                //                                                       
                {
                    //var aMember = aLDSE.MEMBERS.AsEnumerable()
                    //                .Where(members => members.USERNAME == header.Username);
                    //if (aMember.Any())
                    //{
                        return new AuthenticationResult.Success(header.Username);
                    //}
                    //else
                    //{
                    //    return new AuthenticationResult.Failed();
                    //}

                }
            } catch (EntityException)
            {
                return new AuthenticationResult.Failed();
            }
        }

        //Add public method for decoding base 64 later
        public static BasicAuthRequestHeader ExtractBasicHeader(string value)
        {
            try
            {
                var basicBase64Credentials = value.Split(' ')[1];

                var basicCredentials = Encoding.UTF8.GetString( Convert.FromBase64String( basicBase64Credentials ) ).Split(':');

                if (basicCredentials.Length != 2)
                    return null;

                return new BasicAuthRequestHeader(basicCredentials[0], basicCredentials[1]);
            }
            catch
            {
                return null;
            }

        }

    }
}